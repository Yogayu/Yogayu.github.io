<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Azure Yu]]></title>
  <link href="atom.xml" rel="self"/>
  <link href="azureyu.com/"/>
  <updated>2016-10-14T17:33:52+08:00</updated>
  <id>azureyu.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[豆蔻年华 与你为瓣——在豆瓣实习]]></title>
    <link href="azureyu.com/douban-intern.html"/>
    <updated>2016-07-26T22:27:01+08:00</updated>
    <id>azureyu.com/douban-intern.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>豆瓣在乎你的工作，你一定也在意吧。还记得你上学第一天吗？那天早上你遇到了什么样的人，同学、老师&hellip;&hellip; 在豆瓣的实习生活，可能是你人生又一个重要的第一天，你又将遇到些什么样的人，开始什么样的工作和生活。在这里是新的起点，这段经历你不只是一个实习生。——<a href="https://jobs.douban.com/jobs/intern/">工作在豆瓣</a></p>
</blockquote>

<p><br></p>

<h2 id="toc_0">缘起</h2>

<blockquote>
<p><a href="https://blog.douban.com/douban/2016/02/16/3099/">除了一个小秘密，我只是一个极其平凡的人。</a></p>
</blockquote>

<p>一次在朋友圈看到豆瓣的影像诗，心生好感。</p>

<span id="more"></span><!-- more -->

<p>之后看到实习招聘，便抱着试一试的心态投了简历。花了一下午的时间，用心的把自己的大学经历思考和整理了一遍，大致的思路是，我做了什么，达到了什么样的效果，感悟是什么，学到了什么。最后还写了写自己的人生态度，以及为什么想要去豆瓣，整个思考的过程十分流畅。  </p>

<p>很久之后，接到了笔试邮件。笔试方式是通过邮件链接进行在线笔试。当时正好学校组织的实训开始，实训一共三周，第一天选题组队，也在同一天笔试。就像考试时那样，时间流逝异常快。也总觉得如果再多一点时间，就能做得更好。笔试之后，没有多想，忙着做学校实训项目。</p>

<p>大约一周，接到了豆瓣HR的电话，简单的确认面试的时间，最终约在了下午。当时我们实训的地点是实验室，在学校正门东大门入口处，一共五层，U型建筑。站在楼顶宽阔的天台上，一边望着远处的图书馆和缙湖，湖中的喷泉一上一下，一边接着电话。</p>

<p><img src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/WechatIMG46.jpeg" alt="学校"/></p>

<p>因为是第一次电话面试，没经验，所以按照自己的想法准备了准备。想了两段自我介绍，基本上就是讲之前简历中的内容，用口语化的方式再表达了一遍，一个三分钟版本和一个一分钟版本，再想了想可能会问到一些什么问题，零零散散加起来有半天的时间。就像童年里那一句“总是要等到考试前，才发现该念的书没念”。</p>

<p>最终面试的时候，提前找了安静的地方，准备好纸笔。整个面试过程中，除去电话中声音太小，其他的都很顺利，感觉很舒服。因为在问问题之前，都会先确定你准备好了。先告诉你之后会问哪一方面的问题。问完一个问题之后，会根据你的回答再继续深入下去。下午两点面试，四点左右HR便来电话，便通知了结果，然后和HR聊了聊一些基本情况。当时一开心，就说了不少话。不过，开心的劲头过了一会儿，便回去继续码代码了。</p>

<p>当发现和面试我的人微博上互相关注时，还是有一点意外和开心。</p>

<p>如果想让人们通过你平时的表现而不是一次的应试般的面试认识你的话，平时的积累真的很重要。</p>

<p>之后，便是找房子，订机票等等。</p>

<p>提前几天和家人到北京，逛一逛这座城市，和好久不见的小伙伴约聊。</p>

<ul class="example-orbit" data-orbit>
 <li>
    <img src=" http://7xle3b.com1.z0.glb.clouddn.com/WechatIMG5New.png" alt="" />
    <div class="orbit-caption">颐和园</div>
  </li>
  <li>
    <img src="http://7xle3b.com1.z0.glb.clouddn.com/douban/imgWechatIMG3.png" alt="" />
    <div class="orbit-caption">故宫</div>
  </li>
  <li>
    <img src="http://7xle3b.com1.z0.glb.clouddn.com/WechatIMG1.png" alt="" />
    <div class="orbit-caption">天安门</div>
  </li>
  <li>
    <img src="http://7xle3b.com1.z0.glb.clouddn.com/douban/imgWechatIMG2.png" alt="" />
    <div class="orbit-caption">鸟巢</div>
  </li>
  <li>
    <img src="http://7xle3b.com1.z0.glb.clouddn.com/douban/imgWechatIMG7.png" alt="" />
    <div class="orbit-caption">798</div>
  </li>
</ul>

<h2 id="toc_1">环境</h2>

<p>豆瓣位于朝阳区酒仙桥兆维华灯大厦工业园区，出将台路地铁站，便能望见。整个园区由建筑物围成方形，像一个不大的公园，有着各家公司入驻。和一般的公园类似，也摆放着几件健身娱乐器材，一个典型的凉亭，时不时会有人坐在其中。</p>

<p>我在的地方是公司的D区。上三楼，出电梯，抬头便能看见金属水管为底，外嵌着白炽灯泡的箭头指示，右拐就能望见端放着iMac的前台。前台的墙，一片乳白，突出着布质感Douban图标。 整体是Loft装修风格，乳白色调为主，间杂着绿色调。一楼多是办公区，开放式，除去会议室外，没有格子间。办公时可坐可站，桌上能看见很多零零散散堆叠的书本，和一些绿色小植物。室内楼梯上去之后的二楼，多是会议室，我实习的临时办公室也就在一间会议室里。</p>

<p>第一天和已在实习的小伙伴同去，在公司吃了中式早餐，有包子、粥、玉米、油条等等。另外，像下午茶，一般是水果加点小吃。</p>

<p>到达之后，坐在中间的一间会议室内，终于见到了电话中的HR。HR给人的第一感觉很随和，简单的白色T恤加浅色牛仔，套双夏日休闲鞋。她简要的说明了需要填写的表格内容，之后大致的介绍公司历史文化，现在的部门分布，以及主要的产品和业务。同时发送给我们相应的邮件，用于之后工作环境的配置。另外一个有活力的文科妹子和我们一起。</p>

<p>然后便带着我们去各自的部门见导师。也终于见到了电话里面试我的导师，虽然之前也有微信交流，但第一次见面，还是不同。一眼望去的办公桌上，左一叠厚厚的书，其他地方也都被书本覆盖着，间隙中夹着各种各样的线。一台Mac叠放在中间，Mac前是加高的架子，上面立着大屏显示器，这样能方便站着使用电脑。旁边工程师，大多都对着几个屏幕，有横着的屏，有竖着的屏，显示着密密麻麻色彩斑斓的终端代码。特别喜欢着的是一个有着彩色键帽的机械键盘。</p>

<p>导师带着我，简单的给部门的人做了介绍。说一说名字，说一说是实习生。最后到了我办公的区域，在二楼的一个会议室中，到那时已经有其他实习生在那了。大部分都加过微信，知道名字，算是第一次把名字一一与真人对上了号。</p>

<p>第一天，在导师的帮助下，愉快的配置好了网络环境和开发环境。其实，光看别人做事情的方式，就能学到不少，一些实践中的细节可以提高效率。比如git别名，iTerm替代终端，Meow自动代理切换。</p>

<p>中午导师请吃饭，一起聊天，谈方方面面不仅限于技术的事。一顿之后，大致有了相互的了解。想来，果然约饭是最好的了解彼此的方式。</p>

<p>第二天期待已久的暑期训练营便开始了。</p>

<h2 id="toc_2">暑期训练营</h2>

<p><img src="http://7xle3b.com1.z0.glb.clouddn.com/doubanIntern.jpg" alt="-w" class="mw_img_right" style="width:200px;display: block; float: right; margin: 0px 0px 8px 8px;"/></p>

<p>暑期训练营是在一间大会议室里，出前台门外右拐，大约有学校小教室大小。零零散散着几张白色大书桌，不过都是可拼接的，一半凹型，一半凸型。</p>

<p>课程总体来说，技术覆盖面广，但因时间有限，讲得很快。内容多是概览，如果是新手，真的不一定能听完全听懂，不过总会了解到公司现在在使用的技术。</p>

<p>第一天，HR做主持，了解了公司文化。大家一起玩两个小游戏，很快便拉近了实习生之间的距离。一个是互猜名字，另一个是无声传数字。</p>

<p>先是围着坐了大半个圈，每个人介绍自己，基本信息加三个关键词，彼此之间的关键词不能重复，最后在附带可选部分。大家都很随意，大多都是讲自己生活性质的关键词，比如像很宅、喜欢猫、喜欢综艺节目、爱踢球、内向不太会群聚、喜欢什么动漫、猥琐萌、爱冒险。总之，多多少少都带着自己独特的成分。记得，我说的关键词是：科技、文学和音乐。直接说了第一个念想中的答案，之后想想，其实可以说得更接地气一些。</p>

<p>游戏开始之后，分为两组，HR们一人拉一边，用如窗帘般大小的棕色布匹做遮挡，两队分别派自己队伍中一员上场，蹲在布的两边。当一、二、三倒计时声结束之后，松开双手，布帘下滑，第一个说出对方名字的人即是胜利。游戏结束之后，我们都感慨，对方的人都都记全了，自己方的反而还差点儿。</p>

<p>无声传数字，同样分为两组，各自站成一列，出题人在纸上写出数字，由最后一个人在前一个人背上书写，直到传给最前面的人，写下数字，与出题卡数字对比。三局两胜。大概有五分钟的策略商讨时间，大家都在积极的说自己的想法，比如，如果有分数怎么办，如果有小数点怎么办（可是一开始没有想到有负数的情况）。最后，我们队的策略是，在纸上怎么写，就在背上怎么写，暴力拆解，获得胜利。</p>

<p>中午聚餐，很简单，边吃边聊着三三两两的几句话。要是舒服便可以多说说，要是不舒服便可以不说。</p>

<p><img src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/WechatIMG16.jpeg" alt="大合照"/></p>

<p>之后一般一周三天课程，大家随意的坐在一起上课。与其说是听课，不如说是分享。没有高三尺的讲台，没有麦克风，只有平易近人的厂工们，一个接一个的讲解着。PPT多白底黑字，排版简洁，风格简约。</p>

<p>Python当然是开胃菜，一天之内从入门到“高阶”。前端其实很“简单”，两节课之后你就开始写界面。移动开发算什么，四大组件生命周期一次讲完。推荐算法，在几张PPT上优化完成。机械学习一黑板公式。当然我们还有自己造的轮子。Docker知道吗？没事，直接上来讲实践优化。产品经理可以读这个这个还有那个，设计是这样的，用户体验是那样的，豆瓣架构是这样演变的，此处省去一千字。好，讲完，此处应该有掌声👏。（I am kidding :P）</p>

<p><img src="media/14695432218849/Bootcamp.png" alt="Bootcamp 课程表"/></p>

<p><br></p>

<p>中途还有实习生们的分享会，自己也去简单分享了iOS开发从入门到上架的过程。</p>

<p><br></p>

<ul class="clearing-thumbs small-block-grid-2" data-clearing>
  <li><a href=""><img data-caption="iOS" src="http://7xle3b.com1.z0.glb.clouddn.com/iOS_developing_from_Beginning_to_Distribution.png"></a></li>
  <li><a href=""><img data-caption="iOS 2" src="http://7xle3b.com1.z0.glb.clouddn.com/iOS_developing_from_Beginning_to_Distribution_dev.png"></a></li>
</ul>

<p>最后一天称为Happy Day。愉快的入门了Prolog编程语言，第一次动手写逻辑式语言，思维方式转化挺大，而且边做题边和小伙伴讨论，算是最有收获的一天。</p>

<p><br></p>

<p><img src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/prolog.png" alt=""/></p>

<p><br></p>

<h2 id="toc_3">我在做什么</h2>

<ul class="clearing-thumbs small-block-grid-1" data-clearing>
  <li><a href=""><img data-caption="door" src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/WechatIMG19.jpeg"></a></li>
</ul>

<p>一开始配置环境，搭建公司内网VPN。关键是有一个好导师，很快就搞定前期配置。第一次在Xcode中将豆瓣FM运行成功时，心中默默的哇了一声。当知道豆瓣FM iOS客户端目前就我导师一人在维护时，还是有一点小惊讶。</p>

<p>因为FM的代码都是混编(Objective-C &amp; Swift)，自己之前独自开发多使用Swift，所以花了一段时间一边看文档一边看书来熟悉Objective-C。当然理解语法是很快的，多数概念都是共通的，关键是在实际的使用场景中，如何具体选择和使用。<br/>
另外，在新手训练营的间隙中，去逐渐理解项目的组织架构，重点去理了理FM播放部分的核心内容。之前自己做项目时，需要有一个从零到一的过程，各方面都有去思考。但现在更多的是先要理解现有的项目，然后在其上修修补补、添砖加瓦。</p>

<p>熟悉环境之后，才开始正式做第一个功能。内容是调研并实现豆瓣FM的热修复，主要考虑实用和安全。对比调研之后选择了JSPatch。一边调研，一边写Hotfix Demo和对应的过程文档。写文档的好处是能更清晰的思考，记录参考资料；因为用git管理，还能看见一路文档和编码中的演变。在具体的实践过程中，才会出现你一开始无法考虑到的细节问题，以及不同写法选择的优劣。很多时候不需要自己造轮子，但是需要理解轮子、改造轮子，并且知道为什么需要这样去改造。</p>

<p>目前来看我个人还是很喜欢这种方式，可以系统的去理解、实现并完善一个功能，而不只是敲敲打打的修bug。</p>

<p>但也明显感觉自己最近的效率不及在学校高，可能是因为换了环境，新认识了很多人，需要有一段时间来调整节奏。</p>

<h3 id="toc_4">文化</h3>

<p>简单务实 轻松快乐</p>

<p>来了之后才知道，豆瓣是阿北在豆瓣胡同写出，所以叫豆瓣。豆瓣有着<a href="https://blog.douban.com/douban/2007/12/17/105/">指环王文化</a>，项目很多以指环王中的人物命名。项目以前是在自建的Code平台上，现在多用Github企业版。<br/>
Python真的是无处不在。弹性办公时间，不打卡。有着引以为傲的DAE。</p>

<h3 id="toc_5">沟通</h3>

<p>就我平时观察所了解的沟通方式，最简单直接的当然是面对面交流，较正式的事情发邮件(gmail)，写邮件最好主题突出，内容简明。IM用企业微信。大家都在一个大群里，有什么事情可以直接问，发现产品的bug也可以直接在群里提。每周都有周会。团队多在使用Trello。</p>

<h3 id="toc_6">活动</h3>

<p>来北京第一周周末，和导师还有其他部门的人一起去看演唱会。摇滚乐，虽然只有摇滚没有乐，但还是很开心和感激，缓解了离家很远的感觉。</p>

<p>周二有体育活动，比如羽毛球。周三、周四晚会交替着有电影放映。电影的质量很有保证，比最近看的：剧情张力十足，结局引人深思的《完美陌生人》，提前点映，温暖慢调的《幸运是我》（和主演慧英红有映后交流）。大尺度，镜头华美精致，配乐出众的《小姐》，小投资而极富好评的国产恐怖片《中邪》（和导演有映后交流）。</p>

<p><br></p>

<ul class="clearing-thumbs small-block-grid-4" data-clearing>
  <li><a href=""><img data-caption="door" src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/WechatIMG12New.jpeg"></a></li>
  <li><a href=""><img data-caption="798" src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/WechatIMG32.jpeg"></a></li>
  <li><a href=""><img data-caprion="movie" src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/WechatIMG25New.jpeg"></a>
  <li><a href=""><img data-caprion="movie" src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/photo.jpeg"></a>
    <li><a href=""><img data-caprion="movie" src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/WechatIMG23.jpeg"></a>
     <li><a href=""><img data-caprion="movie" src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/WechatIMG34.jpeg"></a>
     <li><a href=""><img data-caprion="movie" src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/lucky.jpeg"></a>
     <li><a href=""><img data-caprion="movie" src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/tur.jpeg"></a>
</ul>

<p><br></p>

<p>看豆瓣的周末去哪北京场，会发现各种风格的活动都很多。帝都虽然空气不好，但文化氛围还是浓烈。</p>

<h2 id="toc_7">生活</h2>

<h3 id="toc_8">住</h3>

<p>早点找房子，多关注周边基础设施，比如饭店、超市等等。租房，还算和谐，大家都有礼貌。推荐豆瓣租房小组。很多都不短租，这一点很麻烦。看图片和看实际相差还是蛮大的，所以最好是去看。中介费一般是房租的一个月价格，短租亦然。</p>

<p>租房这件事，十分感激的是有朋友在北京帮忙看。</p>

<p>住的地方在798艺术区入口，所以没事就可以去逛一逛，看看展览什么的。<br/>
因为和另外两个小伙伴也住一个地方，每天都一起上下班，听他们俩互黑。<br/>
每周末一起去玩，算是把北京有名字的景点都去了一遍。</p>

<h3 id="toc_9">行</h3>

<p>去的时候票最好提前购买。比如机票，可以下载相应的App，然后订阅你想要时间段航班的机票，机票的价位有一定的浮动，你可以等到合适的时间购买。建议能够快递的物品，最好快递，比如衣物，自己带几套，剩下的快递过去就好。这样能够省不少力。北京市内，交通发达，办张交通卡会很方便。</p>

<h3 id="toc_10">食</h3>

<p>各种风味都有。北京基本的口味偏清淡，没有重庆的辣味重，比如这边的火锅很多麻酱，麻辣烫不麻也不烫。</p>

<p>平时和FM部门的同事，中午都一起去吃饭，队伍也是蛮大，每天都会提出人生问题之——“今天吃什么？”。</p>

<h3 id="toc_11">天气</h3>

<p>北京的夏天，蝉声绵绵，热度是赶不上重庆。可惜雾霾太重，跑步都要选日子，总归还能去游泳。</p>

<hr/>

<p>简单记录在豆瓣的一个半月，在这段时间最感激的是遇见的人，只可惜笔力不够，没法一一描述。</p>

<p>不管怎样，生活还在继续，旅途还在继续&hellip;&hellip;</p>

<p><br></p>

<blockquote>
<p>最后附上无处不在的大蛋。</p>
</blockquote>

<p><img src="http://7xle3b.com1.z0.glb.clouddn.com/douban/img/cat.jpeg" alt="Dadan.cat"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Technology Biscuit]]></title>
    <link href="azureyu.com/14711002551177.html"/>
    <updated>2016-08-13T22:57:35+08:00</updated>
    <id>azureyu.com/14711002551177.html</id>
    <content type="html"><![CDATA[
<p>文章就像精神食粮，饕餮大餐的书籍吃多了，偶尔来点小饼干也不错。</p>

<p>所以这里烹饪的文章多短篇，记录日常开发中的配置、工具使用或问题解决等等。</p>

<span id="more"></span><!-- more -->

<p>之后还会烹饪些什么呢？本糕点师还在思考中&hellip;&hellip;</p>

<ul>
<li><a href="./2016-08-13-Xcode-Command-Tool.html">Install Xcode Command Tool</a></li>
<li><a href="./2016-08-13-Kindle-Reset.html">Kindle Reset</a></li>
<li><a href="./2016-08-14-git-alias.html">Git 别名 Git Alias</a></li>
<li><a href="./2016-08-07-Basic-Linux.html">Linux Basic</a></li>
<li><a href="./2016-07-19-iterm2.html">iTerm 2 配置和快捷键</a></li>
<li><a href="./2016-07-10-Vim.html">Vim Bsaic</a></li>
<li><a href="./2016-08-13-jekyll-wrong.html">Jekyll Error</a></li>
<li><a href="./2016-iOSYoga.html">iOSYoga</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自动引用计数（ Auto Reference Count, ARC）]]></title>
    <link href="azureyu.com/2016-07-17-arc.html"/>
    <updated>2016-05-25T22:23:40+08:00</updated>
    <id>azureyu.com/2016-07-17-arc.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>2016-5-25 初稿</p>
</blockquote>

<ol>
<li><p>解决什么样的问题？什么时候释放对象。</p>

<p>对象不同于一般的变量，生存周期受其作用域的影响。比如在函数内声明的变量，在函数之外就没有了作用。对象的生存周期是受其引用对象的影响。</p>

<p>引用的实质是使用指向其内存的指针。</p>

<span id="more"></span><!-- more -->

<p>当我们实例化对象时，也就为其分配了相应的内存，再通过指向对象的指针访问这些内存。释放就是把指向对应内存的指针给消除。而其实，对应内存的内容是没有去改变的。直到该内存下一次被使用时，其内容才会被改变。</p>

<p>什么是内存？计算机内存，是数据存储的地方。计算机存储存在着一种层次结构，如同三角型。因为越快的越贵，越大的越便宜，越大的也越慢。每一个内存都有其对应的地址。如果你学过操作系统，还应该知道，因为虚拟机的原因，程序使用的是虚拟内存，需要进行转换之后，得到实际的物理内存。</p>

<p>什么是指针？指针存储对象所在的内存地址。比如，寻宝图，你到达A地之后，A地会有指向B地的对应消息。这个消息就是指针。</p></li>
<li><p>什么是引用计数？<br/>
引用计数，是当一个对象A使用另一对象B时，对象B的引用数会加一。当对象B没有引用之后，便会释放。</p></li>
<li><p>什么是自动引用计数？</p>

<p>自动引用计数，即当对象被引用之后，会自动对其引用数加一；解除引用之后，会自动减一；没有引用之后，会自动释放。</p></li>
<li><p>为什么需要自动引用计数？方便内存管理。</p></li>
<li><p>什么时候不能使用？对于一些底层的类。</p></li>
<li><p>存在着什么样的弊端？循环引用。<br/>
循环引用，当A对象持有(引用)B对象，B对象持有A对象，此时彼此都在等待对方，导致内存无法释放。 </p>

<p>如何解决？狭路相逢，要么有人仲裁，要么一方示弱。你可以手动解决，或者只将其中一方声明为weak引用。</p>

<p>你可以通过定义类之间的关系为弱引用(weak)或者无主引用(unwoned)，以此替代强引用，从而解决循环强引用的问题。</p></li>
<li><p>其他语言中是如何做的呢？<br/>
Java中采用的是垃圾回收机制(Garbage Collection, GC)。垃圾回收机制的基本原理是建立一棵树。</p></li>
</ol>

<p>GC也有不好的地方，对于实时的应用程序效果就不理想，因为你不知道CG会在什么时候发生。影响系统性能。</p>

<blockquote>
<p>Garbage collection does have its own problems. Languages like Java and Ruby aren’t as suited to <code>real-time applications</code> where timing is critical. In these languages you never know when garbage collection will occur. Of course there is research into these problems to solve this issue for real-time systems but in general C++ is probably a better choice for real-time applications. <br/>
——《Programming Language》</p>
</blockquote>

<p>看编译原理第七章运行时环境，很多东西都讲了的。</p>

<p>突然意识到，很多博客，不过是书籍的个人阐述，不如自己读书。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于编程语言的思考（上）Thinking of the Programming Language (Part 1)]]></title>
    <link href="azureyu.com/programminglanguage.html"/>
    <updated>2016-06-27T19:47:29+08:00</updated>
    <id>azureyu.com/programminglanguage.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">问题 Problems</a>
</li>
<li>
<a href="#toc_1">什么是编程语言？What is programming language?</a>
</li>
<li>
<a href="#toc_2">语言类型 What&#39;s the type of programming languages?</a>
</li>
<li>
<a href="#toc_3">语言的基本组成要素是什么？What’s the core foundations of programming language？</a>
<ul>
<li>
<a href="#toc_4">过程 process</a>
</li>
<li>
<a href="#toc_5">面向对象 object-oriented</a>
</li>
</ul>
</li>
<li>
<a href="#toc_6">Reference:</a>
</li>
</ul>


<span id="more"></span><!-- more -->

<h2 id="toc_0">问题 Problems</h2>

<ul>
<li>什么是编程语言？有哪些？各自是什么类型？What is programming language? How many programming language we have? How many types?</li>
<li>语言的基本组成要素是什么？What&rsquo;s the core foundations of programming language？</li>
<li>为什么有那么多的编程语言? Why there are so many programming language?</li>
<li>语言之间的相同点和异同点是什么？What are the similarities and differences among those languages?</li>
<li>为什么有时候创造一门新语言能更好的解决问题？Why sometimes creating a new language is a better way to solve problems?</li>
<li>如何实现一门编程语言？How to implement a programming language</li>
<li><p>我学过哪些编程语言? How many programming languages I have learned?</p>

<hr/>

<pre><code>- C
- C++
- 汇编
- Java
- C#
- HTML/CSS
- JavaScript
- Swift
- Cobol、JCL
- PHP
- Objective-C
</code></pre></li>
</ul>

<hr/>

<h2 id="toc_1">什么是编程语言？What is programming language?</h2>

<p>人类语言的一大目的是为了沟通，计算机编程语言也是如此。只是编程语言的沟通对象是人与机器。计算机本身很“笨”，因为它所做的所有事情[ <sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup> ]都需要命令指挥。而这些命令就是人们使用编程语言来编写的。</p>

<p>One of the main function of human language is to communicate, so does the computer programming language. But  it&rsquo;s a communication between the computers and human beings. The computer is quite &ldquo;stupid&rdquo; since it only does the instructions which have been told. Those instructions, written by human beings, are programming languages. </p>

<h2 id="toc_2">语言类型 What&rsquo;s the type of programming languages?</h2>

<p>你可能听过不少语言的分类标准，比如，从语言的等级来分，有低级语言(汇编)、中级语言(<code>C</code>)和高级语言(C++，java)。从语言的实现角度来分，有编译型语言(C、C++，Pascal)、解释型语言(php，lisp)和以上两者的混合型语言(Java，Python)。从语言类型是否在编译时确定，也可以分为静态语言（C++，Java）和动态语言（JavaScript）。或者，我们可以从编程风格(编程范式)来分，有面向对象、函数式和逻辑式。当然一种语言可能属于其中的几种类别。</p>

<p>You may have heard different standard of classification.For example, we can divide them from the language level: low level, medium level and high level. We can see from the language Implementation:  Interpreted、Compiled、Hybrid Language Implementations. Or we can divide from the style: Imperative/Object-Oriented Programming, Functional Programming, Logic Programming.  </p>

<p>举个例子，如何区分编译型和解释型呢？一个程序，要让计算机执行，必须是计算机所能理解的形式。编译器可以把用某种编程语言写成的程序（源语言），转换成另一种编程语言（目标语言）。解释器不是通过直接翻译，而是直接一行一行的解释执行。<br/>
How to distinguish between compiled language and interpreted language? A program must be translate to the form which the computer can execute. The complier does the translation from the source language to target language. While the Interpreter directly execute the operations in the source program.</p>

<p>编译器 Complier：<br/>
<img src="media/14670280497426/%E7%BC%96%E8%AF%91%E5%99%A8.jpg" alt="编译器"/></p>

<p>解释器 Interpeter：<br/>
<img src="media/14670280497426/%E8%A7%A3%E9%87%8A%E5%99%A8.jpg" alt="解释器"/></p>

<p>wiki分类：</p>

<p><img src="media/14670280497426/https___zh_wikipedia_org_wiki_ALGOL.png" alt="https___zh_wikipedia_org_wiki_ALGO"/><br/>
<a href="https://zh.wikipedia.org/wiki/ALGOL">图片来源</a></p>

<p><em>编译原理课上，老师推荐学习四门语言，C语言，汇编，脚本语言，Lisp。课后问他为什么没有面向对象的语言，他说面向对象是一种设计。不过，我自己还是坚持面向对象的语言是必学的。</em></p>

<h2 id="toc_3">语言的基本组成要素是什么？What’s the core foundations of programming language？</h2>

<p>因为我个人接触语言的局限性，目前只做了如下的思考，欢迎各位讨论，提出自己的见解。<br/>
The following thinking is based on my own limit experience with programming language, so please feel free to offer your own opinions and discuss with me.</p>

<p>学习一门语言，会学习其语法，以及其对应的语义。语法定义了程序的组织书写形式。语义描述程序将如何被执行。</p>

<blockquote>
<p>Syntax of a programming language determines the well-formed or grammatically correct programs of the language. Semantics describes how or whether such programs will execute. <br/>
- Syntax is how things look <br/>
- Semantics is how things work (the meaning)</p>
</blockquote>

<h3 id="toc_4">过程 process</h3>

<ul>
<li>表达式 expression

<ul>
<li>语句 statement

<ul>
<li>声明 declare 常量与变量</li>
<li>赋值</li>
</ul></li>
<li>判断 judge

<ul>
<li>if-else</li>
<li>switch-case</li>
</ul></li>
<li>循环 loop

<ul>
<li>while / do while</li>
<li>for</li>
<li>if</li>
</ul></li>
</ul></li>
<li><p>操作operation</p>

<ul>
<li>+ - * / %</li>
<li> :? || &amp;&amp; ! &gt;&gt; &lt;&lt;</li>
</ul></li>
<li><p>数据类型 data type (the value and the operation)</p>

<ul>
<li>原始类型 primitive type

<ul>
<li>数值型 numberic: short,int,float,double,long</li>
<li>字符 string:char,string</li>
<li>空 nil</li>
</ul></li>
<li>高级类型 advanced type

<ul>
<li>enumeration</li>
<li>dictionary</li>
<li>array</li>
<li>struct</li>
<li>generic</li>
</ul></li>
</ul></li>
<li><p>函数 function</p>

<ul>
<li>type-return</li>
<li>name</li>
</ul></li>
</ul>

<h3 id="toc_5">面向对象 object-oriented</h3>

<ul>
<li>类 class

<ul>
<li>attribute</li>
<li>function(method)</li>
<li>construct-deconstruct</li>
</ul></li>
<li>继承 inherit

<ul>
<li>单继承、多继承</li>
</ul></li>
<li>多态

<ul>
<li>重载</li>
</ul></li>
<li>接口 interface</li>
<li>协议 delegate</li>
</ul>

<hr/>

<p>SCIP:<br/>
- 过程抽象<br/>
- 数据抽象</p>

<h2 id="toc_6">Reference:</h2>

<ul>
<li><a href="https://www.amazon.com/Programming-Languages-Active-Learning-Approach/dp/0387794212">Programming Language</a></li>
<li><a href="https://www.amazon.com/Compilers-Principles-Techniques-Tools-2nd/dp/0321486811?ie=UTF8&amp;*Version*=1&amp;*entries*=0">Complier</a></li>
<li><a href="https://zh.wikipedia.org/wiki/ALGOL">https://zh.wikipedia.org/wiki/ALGOL</a></li>
<li>SCIP</li>
</ul>

<div class="footnotes">
<hr/>
<ol>

<li id="fn1">
<p>从本质上来看，计算机能做的事情就是计算，不是吗？Actually, the computer can do nothing but computation, isn&rsquo;t it?&nbsp;<a href="#fnref1" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac快速远程控制Windows电脑桌面]]></title>
    <link href="azureyu.com/2016-06-10-RM.html"/>
    <updated>2016-06-10T17:02:31+08:00</updated>
    <id>azureyu.com/2016-06-10-RM.html</id>
    <content type="html"><![CDATA[
<p>我个人在学校使用两台电脑，一台MacBook Air，一台Acer。每次同时开启使用时，总是很不习惯，一直来回切换控制。想着，如果能直接在Mac上控制Windows桌面，那么能省去不少麻烦。</p>

<p>最开始选择Windows Desktop Remote ，总是提示连接未成功。然后尝试VNC Viewer，依旧未果。最后选择了，Google Chrome的远程桌面插件。</p>

<span id="more"></span><!-- more -->

<p>连上互联网之后，分别在两台电脑上下载,<a href="https://chrome.google.com/webstore/detail/chrome-remote-desktop/gbchcmhmhahfdphkhkmpfmihenigjmpp?utm_source=plus">下载链接</a>。</p>

<p><img src="media/14655493510316/Chrome.png" alt="Chrome"/></p>

<p>在Windows端打开插件，并选择分享，它会提示你下载一个软件，点击下载之后，安装即可。</p>

<p>之后再点击分享，会自动生成一串数字，在Mac端的Chrome的远程桌面插件中，点击访问，输入刚才的一串数字，即可。</p>

<p><img src="media/14655493510316/Chrome_%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2.png" alt="Chrome_远程桌面"/></p>

<p>这样同时控制两天电脑就方便多了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[校园网无路由器无显示器情况下使用树莓派]]></title>
    <link href="azureyu.com/2016-06-05-connectRaspberryPi.html"/>
    <updated>2016-06-05T00:02:51+08:00</updated>
    <id>azureyu.com/2016-06-05-connectRaspberryPi.html</id>
    <content type="html"><![CDATA[
<p>就如标题所言，我们的处境很艰难。</p>

<p>想玩树莓派，但是没有额外的显示器。<br/>
还是在校园网的环境下，无法通过路由器查看树莓派IP地址。</p>

<span id="more"></span><!-- more -->

<ul>
<li>
<a href="#toc_0">解决方案</a>
</li>
<li>
<a href="#toc_1">怎么获取IP地址？</a>
<ul>
<li>
<a href="#toc_2">第一步：查找</a>
</li>
<li>
<a href="#toc_3">第二步：连接</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">怎么进行VNC连接？</a>
<ul>
<li>
<a href="#toc_5">第一步 网络共享</a>
</li>
<li>
<a href="#toc_6">第二步 安装VNC Server</a>
</li>
<li>
<a href="#toc_7">第三步 启动VNC Viwer</a>
</li>
</ul>
</li>
<li>
<a href="#toc_8">进阶 如何自动开启VNC Server？</a>
</li>
</ul>


<h2 id="toc_0">解决方案</h2>

<p>不过办法总比困难多。</p>

<p>我们可以使用<a href="https://zh.wikipedia.org/wiki/Secure_Shell">SSH</a>登录之后，再使用<a href="https://zh.wikipedia.org/wiki/VNC">VNC</a>操纵树莓派。</p>

<h2 id="toc_1">怎么获取IP地址？</h2>

<p>想要通过SSH登录，你需要知道树莓派的IP地址。<br/>
树莓派默认是开启<a href="https://zh.wikipedia.org/wiki/%E5%8A%A8%E6%80%81%E4%B8%BB%E6%9C%BA%E8%AE%BE%E7%BD%AE%E5%8D%8F%E8%AE%AE">DHCP</a>的，也就是说它会自动分配动态地址。</p>

<p>如果你有路由器，那么很简单，登录路由器配置网址即可。但是，有时候学校没有办法用路由器。</p>

<p>假设你的电脑可以连上无线网络。</p>

<h3 id="toc_2">第一步：查找</h3>

<p>运行命令，输入</p>

<pre><code>    arp -a
</code></pre>

<p>将网线一端连接树莓派，另一端连接电脑。</p>

<p>再次输入<br/>
        arp -a</p>

<p>对比两次结果，多出来IP地址的即是树莓派的IP地址。</p>

<p><img src="media/14650561718675/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9E%E6%8E%A51.jpg" alt="树莓派连接1"/></p>

<h3 id="toc_3">第二步：连接</h3>

<p>打开Putty(可在网络上下载，该软件开源)。</p>

<p>输入刚才的IP地址，可以将其Save，方便下次使用。<br/>
回车连接。</p>

<p><img src="media/14650561718675/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9E%E6%8E%A52.jpg" alt="树莓派连接2"/></p>

<p>连接成功之后，输入用户名，默认为pi，回车。<br/>
再输入密码，默认为raspberry，回车。<br/>
即登录成功。</p>

<p><img src="media/14650561718675/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9E%E6%8E%A53.jpg" alt="树莓派连接3"/></p>

<h2 id="toc_4">怎么进行VNC连接？</h2>

<h3 id="toc_5">第一步 网络共享</h3>

<p>将电脑网络共享给树莓派。<br/>
进入设置，搜索更改适配器设置，进入。<br/>
选择无线网连接，右击属性，点击共享Tab，勾选“运行其他网络用户通过此计算机的Internet连接来连接”，点击确定。</p>

<h3 id="toc_6">第二步 安装VNC Server</h3>

<p>在树莓派上安装VNC Server：</p>

<pre><code>sudo apt-get install tightvncserver
</code></pre>

<p><img src="media/14650561718675/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9E%E6%8E%A54.jpg" alt="树莓派连接4"/></p>

<p>安装成功之后设置两次密码。我已经安装过了，所以没有输入。</p>

<p>启动树莓派VNC Server</p>

<pre><code>vncserver :1 -geometry 800x600
</code></pre>

<p>vncserver 和 :1之间有空格，不然就会像我👇下面那样。</p>

<p><img src="media/14650561718675/%E6%A0%91%E8%8E%93%E6%B4%BE%E8%BF%9E%E6%8E%A55.jpg" alt="树莓派连接5"/></p>

<p>Tips:</p>

<p>如果VNC Server密码忘了怎么办？<br/>
输入</p>

<pre><code>vncpasswd
</code></pre>

<p>来进行重置：</p>

<p>（请忽略我之前的错误尝试）</p>

<p><img src="media/14650561718675/7.jpg" alt="7"/></p>

<h3 id="toc_7">第三步 启动VNC Viwer</h3>

<p>如果你电脑没有安装VNC Viewer需要先安装，<a href="www.realvnc.com">下载地址</a>。</p>

<p>输入树莓派IP加设置vnc server时的对于号(比如刚才是:1)</p>

<pre><code>192.168.2.2:1 
</code></pre>

<p>点击Connect，输入vncserver密码。</p>

<p>OK，大功告成。</p>

<p><img src="media/14650561718675/8.jpg" alt="8"/></p>

<p><img src="media/14650561718675/10.jpg" alt="10"/></p>

<h2 id="toc_8">进阶 如何自动开启VNC Server？</h2>

<p>原理是写一个脚本，在root时自动执行。</p>

<p>在终端中登录：</p>

<pre><code>sudo su
</code></pre>

<p>进入目录：/etc/init.d/:</p>

<pre><code>cd ./etc/init.d/
</code></pre>

<p>在此目录下新建一个文件：</p>

<pre><code>#! /bin/sh
# /etc/init.d/vncboot

### BEGIN INIT INFO
# Provides: vncboot
# Required-Start: $remote_fs $syslog
# Required-Stop: $remote_fs $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start VNC Server at boot time
# Description: Start VNC Server at boot time.
### END INIT INFO

USER=pi
HOME=/home/pi

export USER HOME

case &quot;$1&quot; in
 start)
  echo &quot;Starting VNC Server&quot;
  #Insert your favoured settings for a VNC session
  su - $USER -c &quot;/usr/bin/vncserver :1 -geometry 1000x800 &quot;
  ;;

 stop)
  echo &quot;Stopping VNC Server&quot;
  /usr/bin/vncserver -kill :1
  ;;

 *)
  echo &quot;Usage: /etc/init.d/vncboot {start|stop}&quot;
  exit 1
  ;;
esac

exit 0
</code></pre>

<p>保存。</p>

<p>使该文件可执行：</p>

<pre><code>chmod 755 filename
</code></pre>

<p>最后：</p>

<pre><code>update-rc.d -f lightdm remove
update-rc.d vncboot defaults
</code></pre>

<p>返回：</p>

<pre><code>update-rc.d: using dependency based boot sequencing
</code></pre>

<p>说明成功了。</p>

<p>重启你的树莓派，VNC Server就会自动运行了。</p>

<p>愉快的开始玩吧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 独立开发记录]]></title>
    <link href="azureyu.com/iOSDevRecord.html"/>
    <updated>2016-04-27T00:19:05+08:00</updated>
    <id>azureyu.com/iOSDevRecord.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>前期思考要全面，设计要具体，在具体实现过程中，需要兵来将挡，水来土掩。</p>
</blockquote>

<p>半个月前，完成了个人App的2.0版本，也在普天同庆的六一儿童节这天上架了。因为是个人开发，很多实现都是边探索边做。现在完成之后再回顾，发现自己走了些弯路。所以写了这篇总结，概览了从想法、设计、开发到最终发布的过程。希望读者参考本文，可以少走一些弯路；另外，本文也给列出了开发中具体思路和资源列表。</p>

<span id="more"></span><!-- more -->

<ul>
<li>
<a href="#toc_0">知识从何而来？</a>
</li>
<li>
<a href="#toc_1">资源</a>
</li>
</ul>
</li>
<li>
<a href="#toc_2">想法</a>
<ul>
<li>
<a href="#toc_3">设计</a>
</li>
<li>
<a href="#toc_4">开发</a>
<ul>
<li>
<a href="#toc_5">多主题设计</a>
<ul>
<li>
<a href="#toc_6">配色</a>
</li>
<li>
<a href="#toc_7">多主题实现</a>
</li>
</ul>
</li>
<li>
<a href="#toc_8">本地化</a>
</li>
<li>
<a href="#toc_9">保持用户设置</a>
<ul>
<li>
<a href="#toc_10">Struct如何转为AnyObject？</a>
</li>
<li>
<a href="#toc_11">存储用户当前主题设置</a>
</li>
</ul>
</li>
<li>
<a href="#toc_12">摇一摇换肤</a>
</li>
<li>
<a href="#toc_13">钟摆绘制</a>
</li>
<li>
<a href="#toc_14">侧边菜单栏</a>
<ul>
<li>
<a href="#toc_15">分离</a>
</li>
<li>
<a href="#toc_16">动画 Spring Animation</a>
</li>
</ul>
</li>
<li>
<a href="#toc_17">内购</a>
</li>
<li>
<a href="#toc_18">声音</a>
</li>
<li>
<a href="#toc_19">后台播放</a>
</li>
<li>
<a href="#toc_20">细节问题</a>
<ul>
<li>
<a href="#toc_21">为什么nav颜色无法更改，感觉蒙上了一层影？</a>
</li>
<li>
<a href="#toc_22">为什么点击按钮之后，图片位置会改变？</a>
</li>
<li>
<a href="#toc_23">UIScrollerView</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_24">测试</a>
</li>
<li>
<a href="#toc_25">发布</a>
<ul>
<li>
<a href="#toc_26">网站</a>
</li>
<li>
<a href="#toc_27">截图</a>
</li>
<li>
<a href="#toc_28">视频</a>
</li>
<li>
<a href="#toc_29">上传</a>
</li>
<li>
<a href="#toc_30">介绍</a>
</li>
<li>
<a href="#toc_31">被拒 5-24</a>
<ul>
<li>
<a href="#toc_32">再次被拒</a>
</li>
<li>
<a href="#toc_33">审核通过 6-1</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_34">Market</a>
</li>
</ul>


<h2 id="toc_0">知识从何而来？</h2>

<p>Apple的知识又是从何而来？是哪些人在创造这些机制，又是哪些人在传播这些机制？为什么要这样设计呢？为什么要这样编码呢？</p>

<p>iOS开发是在询问什么问题？技术的实现，究竟是在问什么？为什么要这样做？那样做？评价的标准为何？</p>

<h2 id="toc_1">资源</h2>

<p>我在开发过程中常使用的资源：</p>

<ul>
<li><p>相关书籍 </p>

<p>寻找大致实现方向，我有庞大的电子书库，在此感谢学校提供的优质资源。很多书，都会先检视阅读一遍，这样心中有地图，开发时就可快速定位。</p>

<p>书本是理论的简单系统化表示。</p></li>
<li><p>Apple 官方文档 视频 示例代码</p>

<p>系统化的概览，具体可使用内容的查找。</p></li>
<li><p>StackOverflow </p>

<p>主要是查找一些细节问题。</p></li>
<li><p>Github上的相关项目</p>

<p>看具体的代码实现，分析不同实现的优缺点，取其精华去其糟粕。</p></li>
<li><p>Raywenderlich</p>

<p>可以很快上手入门新知识点。</p></li>
<li><p>博客</p></li>
<li><p>论文 <br/>
对于想深入理解的知识，会参考相关论文。</p></li>
</ul>

<p>搜索时使用google或者bing，绝对可以节约你的时间。时间即是生命。<br/>
我选择的简单是易用SS，<a href="https://portal.shadowsocks.com/aff.php?aff=6105">我的推介链接</a>。</p>

<h1 id="toc_2">想法</h1>

<ul>
<li>目标：简洁优雅易用节拍器</li>
<li>用户：学习乐器演奏的群体</li>
<li>使用场景：乐器演奏</li>
<li>做什么：小而美。好看，好用，占内存小。</li>
<li>不做什么：不做专业程度极高，功能十分完备的节拍器。</li>
</ul>

<h1 id="toc_3">设计</h1>

<p>我一般使用Sketch进行快速原型设计。<br/>
同时思考，是否可实现？</p>

<h1 id="toc_4">开发</h1>

<p>我使用的是coding的仓库，git进行版本管理。</p>

<p>主要介绍2.0版本中的一些开发过程。<br/>
你可以免费下载，看看有哪些基本功能。</p>

<h2 id="toc_5">多主题设计</h2>

<h3 id="toc_6">配色</h3>

<p>参考网站：</p>

<ul>
<li><a href="https://coolors.co/browser">https://coolors.co/browser</a></li>
<li><a href="http://uigradients.com/#Jonquil">http://uigradients.com/#Jonquil</a></li>
<li><a href="http://www.rocket-design.fr/color-template/">http://www.rocket-design.fr/color-template/</a></li>
<li><a href="http://www.shejidaren.com/examples/tools/color-scheme/">http://www.shejidaren.com/examples/tools/color-scheme/</a></li>
<li><a href="http://www.shejidaren.com/mbe-style.html">http://www.shejidaren.com/mbe-style.html</a></li>
<li><a href="http://www.peise.net/">http://www.peise.net/</a></li>
</ul>

<p>扁平化颜色库：</p>

<blockquote>
<p><code>Chameleon</code> is a lightweight, yet powerful, color framework for iOS (Objective-C &amp; Swift). It is built on the idea that software applications should function effortlessly while simultaneously maintaining their beautiful interfaces.</p>

<p><a href="https://github.com/ViccAlexander/Chameleon">https://github.com/ViccAlexander/Chameleon</a></p>
</blockquote>

<h3 id="toc_7">多主题实现</h3>

<p>OC版：<br/>
<a href="https://github.com/Draveness/DKNightVersion">https://github.com/Draveness/DKNightVersion</a></p>

<p>Swift版：<br/>
<a href="http://www.jianshu.com/p/a5cd0176bcf5">http://www.jianshu.com/p/a5cd0176bcf5</a><br/>
<a href="https://github.com/zhangbozhb/ChameleonSwift">https://github.com/zhangbozhb/ChameleonSwift</a></p>

<ol>
<li>theme</li>
<li>view</li>
</ol>

<p>部分配色表：</p>

<table>
<thead>
<tr>
<th>Name</th>
<th>defaultColor</th>
<th>SeaColor</th>
<th>GreenColor</th>
<th>CoffeeColor</th>
</tr>
</thead>

<tbody>
<tr>
<td>backgroundColor</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>BlockColor</td>
<td>rgba(184, 184, 184, 1)</td>
<td>#D5EBE9</td>
<td>#F4ADA2</td>
<td>#D4C38F</td>
</tr>
<tr>
<td>BlockColorFill</td>
<td>rgba(251, 251, 251, 1)</td>
<td>#F5FAF9</td>
<td>#F07973</td>
<td>#EFDFAF</td>
</tr>
<tr>
<td>BlockBdrColor</td>
<td>rgba(57, 57, 57, 1)</td>
<td>#38465F</td>
<td>#38465F</td>
<td>#272727</td>
</tr>
<tr>
<td>shadowColor</td>
<td>rgba(41, 44, 48, 1)</td>
<td>#38465F</td>
<td>#A0785C</td>
<td>#5D4531</td>
</tr>
<tr>
<td>Sliderstart</td>
<td>rgba(184, 184, 184, 1)</td>
<td>#F5FAF9</td>
<td>#F2F2F2</td>
<td>#88DEF2</td>
</tr>
<tr>
<td>Sliderend</td>
<td>rgba(185, 200, 245, 1)</td>
<td>#B0D5C2</td>
<td>#F4ADA2</td>
<td>#FAD199</td>
</tr>
<tr>
<td>SliderBackground</td>
<td>Black</td>
<td>#364960</td>
<td>#3A4C39</td>
<td>#2B2B2B</td>
</tr>
<tr>
<td>nameIncDecTextColor</td>
<td>Black</td>
<td>White</td>
<td>Black</td>
<td>Black</td>
</tr>
<tr>
<td>labelColor</td>
<td>Black</td>
<td>white</td>
<td>Black</td>
<td>Black</td>
</tr>
</tbody>
</table>

<p>根据图片配色举例：</p>

<p><a href="http://www.design-seeds.com/sea/color-sail-2/">seaColor</a>:</p>

<p><img src="media/14616875454899/Color_Sail___Design_Seeds.png" alt="Color_Sail___Design_Seeds"/><img src="media/14616875454899/Color1.png" alt="Colo"/></p>

<!-- more -->

<p>代码实现：</p>

<ol>
<li><p>Struct方式</p>

<pre><code>public protocol YXYTheme {
    // MetreView
    var blockColor              : UIColor { get set }
    var blockFillColor          : UIColor { get set }
    var blockBdrColor           : UIColor { get set }
    var blockShadowColor        : UIColor { get set }
    // View
    var backgroundColor         : UIColor { get set }
    var nameIncDecTextColor     : UIColor { get set }
    var labelColor              : UIColor { get set }
    var incAndDecLabelTextColor : UIColor { get set }
    // Slider
    var sliderBackgroundColor   : UIColor { get set }
    var sliderStartColor        : UIColor { get set }
    var sliderEndColor          : UIColor { get set }
    var sliderHandleColor       : UIColor { get set }
}   

struct DarkTheme : YXYTheme, AnyObjectConvertible {
    var blockColor              = UIColor(red:0.72, green:0.72, blue:0.72, alpha:1)
    var blockFillColor          = UIColor(red:0.95, green:0.95, blue:0.95, alpha:1)
    var blockBdrColor           = UIColor(red:0.21, green:0.21, blue:0.21, alpha:1)
    var blockShadowColor        = UIColor(red:0.16, green:0.17, blue:0.19, alpha:1)
    var backgroundColor         = UIColor(red:0.34, green:0.34, blue:0.34, alpha:1)
    var nameIncDecTextColor     = UIColor(red:0.95, green:0.95, blue:0.95, alpha:1)

    var labelColor              = UIColor.whiteColor()
    var incAndDecLabelTextColor = UIColor.whiteColor()
    var sliderBackgroundColor   = UIColor.lightGrayColor()
    var sliderStartColor        = UIColor.grayColor()
    var sliderEndColor          = UIColor.greenColor()
    var sliderHandleColor       = UIColor.greenColor()
}
</code></pre></li>
<li><p>class 方式</p>

<pre><code>//
//  LightTheme.swift
//  GuitarFere
//
//  Created by youxinyu on 16/3/10.
//  Copyright © 2016年 yogayu.github.io. All rights reserved.
//

import UIKit

class LightTheme : NSObject, YXYTheme, AnyObjectConvertible
{
    var blockColor              = UIColor(red:0.72, green:0.72, blue:0.72, alpha:1)
    var blockFillColor          = UIColor(red:0.95, green:0.95, blue:0.95, alpha:1)
    var blockBdrColor           = UIColor(red:0.21, green:0.21, blue:0.21, alpha:1)
    var blockShadowColor        = UIColor(red:0.16, green:0.17, blue:0.19, alpha:1)
    var backgroundColor         = UIColor.whiteColor()
    var nameIncDecTextColor     = UIColor(red:0.95, green:0.95, blue:0.95, alpha:1)
    var labelColor              = UIColor.whiteColor()
    var incAndDecLabelTextColor = UIColor.whiteColor()
    var sliderBackgroundColor   = UIColor.lightGrayColor()
    var sliderStartColor        = UIColor.grayColor()
    var sliderEndColor          = UIColor.redColor()
    var sliderHandleColor       = UIColor.greenColor()

init( blockColor:UIColor, blockFillColor:UIColor, blockBdrColor:UIColor, blockShadowColor:UIColor, 
        backgroundColor:UIColor, nameIncDecTextColor:UIColor, labelColor:UIColor, incAndDecLabelTextColor:UIColor, 
        sliderBackgroundColor:UIColor, sliderStartColor:UIColor, sliderEndColor:UIColor, sliderHandleColor:UIColor){

    self.blockColor = blockColor
    self.blockFillColor = blockFillColor
    self.blockBdrColor = blockBdrColor
    self.blockShadowColor = blockShadowColor
    self.backgroundColor = backgroundColor
    self.nameIncDecTextColor = nameIncDecTextColor
    self.labelColor = labelColor
    self.incAndDecLabelTextColor = incAndDecLabelTextColor
    self.sliderBackgroundColor = sliderBackgroundColor
    self.sliderStartColor = sliderStartColor
    self.sliderEndColor = sliderEndColor
    self.sliderHandleColor = sliderHandleColor

    }
}   
</code></pre></li>
</ol>

<h2 id="toc_8">本地化</h2>

<p>参见我之前博文：<br/>
<a href="http://www.jianshu.com/p/782aaf3bf7da">http://www.jianshu.com/p/782aaf3bf7da</a><br/>
或<br/>
<a href="http://azureyu.com/2016-05-14-iOS-Localizable.html">http://azureyu.com/2016-05-14-iOS-Localizable.html</a>      </p>

<h2 id="toc_9">保持用户设置</h2>

<pre><code>let userDefaultsLastTempoKey = &quot;DefaultsTempoKey&quot;   

let defaults = NSUserDefaults.standardUserDefaults()

func saveTempo(tempo:Int){
    defaults.setInteger(tempo, forKey: userDefaultsLastTempoKey)
    defaults.synchronize()
}
</code></pre>

<p>读取：</p>

<pre><code>func initialTempo(){
    let savedTempo = NSUserDefaults.standardUserDefaults().objectForKey( userDefaultsLastTempoKey) as? Int
    if let tempo = savedTempo {
        metronome.tempo = tempo
        tempoLabel.text = &quot;\(metronome.tempo)&quot;
    }else {
        tempoLabel.text = &quot;\(metronome.tempo)&quot;
    }
}
</code></pre>

<h3 id="toc_10">Struct如何转为AnyObject？</h3>

<p>参考：<br/>
<a href="https://github.com/tarunon/AnyObjectConvertible">https://github.com/tarunon/AnyObjectConvertible</a></p>

<pre><code>class Box&lt;T&gt; {
let value: T
init(value: T) {
self.value = value
}
}

NSNotificationCenter.defaultCenter().postNotificationName(&quot;foo&quot;, object: Box(value: YourOwnStruct())) // OK
But Box&lt;T&gt; unwrap is too lazy.
let value = (notification.object as? Box&lt;YourOwnStruct&gt;)?.value

You can cast your struct/enum directory if implement AnyObjectConvertible at that type.

extension YourOwnStruct: AnyObjectConvertible {}

NSNotificationCenter.defaultCenter().postNotificationName(&quot;foo&quot;, object: YourOwnStruct()) // OK
let value = notification.object as? YourOwnStruct
</code></pre>

<h3 id="toc_11">存储用户当前主题设置</h3>

<p>初始显示，无法使用函数更改，为什么？<br/>
解决：因为存的内容不对，主题是一个Struct或Class。</p>

<pre><code>func initTheme() {
    let savedTheme = retrieveTheme()

    if let theme = savedTheme {
        UIApplication.ch_switchTheme(lightTheme)
    }else{
        // ...
    }
}
</code></pre>

<p><del>转化Struct为AnyObject之后存储：AnyObject， BOX(Theme)<br/>
取：AnyObject。传给UIApplication.ch_switchTheme(theme)的是YXYTheme，需要将AnyObject转为YXYTheme。</del></p>

<pre><code>GuitarFere[20074:736310] *** Terminating app due to uncaught exception &#39;NSInvalidArgumentException&#39;, reason: &#39;Attempt to insert non-property list object GuitarFere.Box&lt;GuitarFere.YXYTheme&gt; for key DefaultThemeKey&#39;
</code></pre>

<blockquote>
<p>The code you posted tries to save an array of custom objects to NSUserDefaults. You can&rsquo;t do that. Implementing the NSCoding methods doesn&rsquo;t help. You can only store things like NSArray, NSDictionary, NSString, NSData, NSNumber, and NSDate in NSUserDefaults.<br/>
You need to convert the object to NSData (like you have in some of the code) and store that NSData in NSUserDefaults. You can even store an NSArray of NSData if you need to.<br/>
When you read back the array you need to unarchive the NSData to get back your BC_Personobjects.<br/>
<a href="http://stackoverflow.com/questions/19720611/attempt-to-set-a-non-property-list-object-as-an-nsuserdefaults">http://stackoverflow.com/questions/19720611/attempt-to-set-a-non-property-list-object-as-an-nsuserdefaults</a></p>
</blockquote>

<pre><code>func saveTheme(theme:LightTheme){

//    let archivedObject = NSKeyedArchiver.archivedDataWithRootObject((theme as? NSObject)!)
    let archivedObject = NSKeyedArchiver.archiveRootObject(theme as NSObject, toFile: userDefaultsLastThemeKey)

    defaults.setObject(archivedObject, forKey: userDefaultsLastThemeKey)
    defaults.synchronize()
}


存：

    func saveTheme(theme:LightTheme){

    //    let archivedObject = NSKeyedArchiver.archivedDataWithRootObject((theme as? NSObject)!)
        let archivedObject = NSKeyedArchiver.archiveRootObject(theme as NSObject, toFile: userDefaultsLastThemeKey)

        defaults.setObject(archivedObject, forKey: userDefaultsLastThemeKey)
        defaults.synchronize()
    }
</code></pre>

<p>上面解决方式还是有问题。</p>

<p><strong>突然想到，不用保存主题本身，直接保存是第几个(Int)主题就好。<br/>
问题就这样解决了。</strong></p>

<h2 id="toc_12">摇一摇换肤</h2>

<pre><code>override func canBecomeFirstResponder() -&gt; Bool {
    return true
}

override func motionBegan(motion: UIEventSubtype, withEvent event: UIEvent?) {
    if(event?.subtype == UIEventSubtype.MotionShake) {
        randomTheme()
        print(&quot;shacked&quot;)
        self.setNeedsStatusBarAppearanceUpdate()
    }
}

func randomTheme() {
    let max = themes.count - 1
    let index = randomIn(min: 0, max: max)
    let randomTheme = themes[index]
    saveTheme(index)
    UIApplication.ch_switchTheme(randomTheme)
}
</code></pre>

<h2 id="toc_13">钟摆绘制</h2>

<p>主要使用图像绘制。</p>

<p>例如绘制三角形：</p>

<pre><code>func drawTriangle()
    {
        //1.获得图形上下文
        let context = UIGraphicsGetCurrentContext()

        //绘制三角形
        let height = self.frame.height
        let width = self.frame.width

        CGContextMoveToPoint(context, 0, 0)
        CGContextAddLineToPoint(context, width, height/2)
        CGContextAddLineToPoint(context, 0, height)

        //关闭路径，闭环，（连接起点和最后一个点）
        powerOffColor.setFill()
        CGContextClosePath(context)
        //显示在view上
        CGContextFillPath(context)
    }
</code></pre>

<h2 id="toc_14">侧边菜单栏</h2>

<p>查看Github上相关实现，一开始选择的是<a href="https://github.com/dekatotoro/SlideMenuControllerSwift">SlideMenuControllerSwift</a>，后来决定更改为自定义，使用更简洁的方式。</p>

<h3 id="toc_15">分离</h3>

<p>分离之前的SliderMeanController，再添加动画。</p>

<ol>
<li>MainViewController </li>
</ol>

<p>remove:</p>

<pre><code>    extension MainViewController:SlideMenuControllerDelegate{

    func leftWillOpen() {
//        print(&quot;SlideMenuControllerDelegate: leftWillOpen&quot;)
        OnceOpened = true
    }

    func leftDidOpen() {
//        print(&quot;SlideMenuControllerDelegate: leftDidOpen&quot;)
    }

    func leftWillClose() {
//        print(&quot;SlideMenuControllerDelegate: leftWillClose&quot;)

        noteLabel.text = &quot;\(metronome.noteNum)&quot;
        metreLabel.text = &quot;\(metronome.metreView.numMetre)&quot;
        tempoLabel.text = &quot;\(metronome.tempo)&quot;
        tempoItalianName(italianName)
        initialHandelPoint()
        metronome.metreView.setNeedsDisplay()

        print(&quot;subview count:&quot;)
        print(view.subviews.count)
        self.ball.setNeedsDisplay()
    }

    func leftDidClose() {
//        print(&quot;SlideMenuControllerDelegate: leftDidClose&quot;)
    }

}
</code></pre>

<ol>
<li>LeftViewController</li>
</ol>

<p>remove:</p>

<pre><code>wiilappear:
initialMenu()
</code></pre>

<p>class里面：</p>

<pre><code>weak var delegate: LeftMenuProtocol?

func initialMenu() {

    let storyboard = UIStoryboard(name: &quot;Main&quot;, bundle: nil)
    let nonMenuController = storyboard.instantiateViewControllerWithIdentifier(&quot;purchaseViewController&quot;) as! PurchaseViewController
    nonMenuController.delegate = self
    self.nonMenuViewController = UINavigationController(rootViewController: nonMenuController)
}
</code></pre>

<p>class 前：</p>

<pre><code>enum LeftMenu: Int {
    case Main = 0
}
protocol LeftMenuProtocol : class {
    func changeViewController(menu: LeftMenu)
}
</code></pre>

<p>class extension：</p>

<pre><code>// MARK: - LeftMenuProtocol
extension LeftViewController: LeftMenuProtocol{
    func changeViewController(menu: LeftMenu) {
        switch menu {
        case .Main:
            self.slideMenuController()?.changeMainViewController(self.mainViewController, close: true)
        }
    }
}
</code></pre>

<p>alert 转场：</p>

<pre><code>self.slideMenuController()?.
changeMainViewController(self.nonMenuViewController, close: true)
</code></pre>

<p>App delegate里面：</p>

<pre><code>private func createMenuView() {

    // create viewController code...
    let storyboard = UIStoryboard(name: &quot;Main&quot;, bundle: nil)

    let mainViewController = storyboard.instantiateViewControllerWithIdentifier(&quot;MainViewController&quot;) as! MainViewController
    let leftViewController = storyboard.instantiateViewControllerWithIdentifier(&quot;LeftViewController&quot;) as! LeftViewController

    let mvc: UINavigationController = UINavigationController(rootViewController: mainViewController)

    UINavigationBar.appearance().tintColor = UIColor(hex: &quot;689F38&quot;)

    leftViewController.mainViewController = mvc

    let slideMenuController = ExSlideMenuController(mainViewController:mvc, leftMenuViewController: leftViewController)
    slideMenuController.automaticallyAdjustsScrollViewInsets = true
    slideMenuController.delegate = mainViewController
    //        self.window?.backgroundColor = UIColor(red: 236.0, green: 238.0, blue: 241.0, alpha: 1.0)
    self.window?.rootViewController = slideMenuController
    self.window?.makeKeyAndVisible()
}
</code></pre>

<p>purchaseViewCont：</p>

<p>class 里面：</p>

<pre><code>weak var delegate: LeftMenuProtocol?


func done() {
    delegate?.changeViewController(LeftMenu.Main)
}


override func viewWillAppear(animated: Bool) {
    super.viewWillAppear(animated)
    self.removeNavigationBarItem()

    let doneTitle = NSLocalizedString(&quot;doneTitle&quot;, comment: &quot;Purchase done title&quot;)
    let rightButton: UIBarButtonItem = UIBarButtonItem(title: doneTitle, style: .Plain, target: self, action: #selector(done))
    navigationItem.rightBarButtonItem = rightButton

    }
</code></pre>

<h3 id="toc_16">动画 Spring Animation</h3>

<p>我使用的是MengTo的<a href="https://github.com/MengTo/Spring">Spring动画库</a>。</p>

<h2 id="toc_17">内购</h2>

<p>技术参考：</p>

<p><a href="https://developer.apple.com/in-app-purchase/">https://developer.apple.com/in-app-purchase/</a><br/>
<a href="https://www.raywenderlich.com/122144/in-app-purchase-tutorial">https://www.raywenderlich.com/122144/in-app-purchase-tutorial</a><br/>
<a href="https://www.raywenderlich.com/121218/video-tutorial-in-app-purchase-series-introduction">https://www.raywenderlich.com/121218/video-tutorial-in-app-purchase-series-introduction</a><br/>
<a href="https://github.com/mattt/Ono">https://github.com/mattt/Ono</a><br/>
<a href="https://github.com/awseeley/Swift-In-App-Purchase-Tutorial">https://github.com/awseeley/Swift-In-App-Purchase-Tutorial</a></p>

<p>页面实现：<br/>
How to make a beautiful page for the purchase?<br/>
使用Collection View，使用卡片展示。</p>

<h2 id="toc_18">声音</h2>

<p>Where to find the good sound?<br/>
推荐网站：</p>

<ul>
<li><a href="https://www.freesound.org/people/toiletrolltube/sounds/345691/">https://www.freesound.org/people/toiletrolltube/sounds/345691/</a></li>
<li><a href="http://www.findsounds.com/ISAPI/search.dll?keywords=drum+solo">http://www.findsounds.com/ISAPI/search.dll?keywords=drum+solo</a></li>
</ul>

<p>声音下载之后需要自己进行一些细化处理，推荐Sound Studio，它小而简洁，进行简单的处理足够了。</p>

<h2 id="toc_19">后台播放</h2>

<p>参考书籍：iOS8 Programming </p>

<p>Appledelegate:</p>

<pre><code>func application(application: UIApplication,didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool    {

    // paly on the background
    _ = try? AVAudioSession.sharedInstance().setCategory(AVAudioSessionCategoryAmbient, withOptions: [])
    // others
  }

func applicationWillResignActive(application: UIApplication) {

    _ = try? AVAudioSession.sharedInstance().setActive(true, withOptions: [])
}

func applicationDidBecomeActive(application: UIApplication) {

    _ = try? AVAudioSession.sharedInstance().setActive(true, withOptions: [])
}
</code></pre>

<h2 id="toc_20">细节问题</h2>

<p>问题：</p>

<h3 id="toc_21">为什么nav颜色无法更改，感觉蒙上了一层影？</h3>

<p><img src="media/14616875454899/nav_problem.png" alt="nav_proble"/></p>

<pre><code>解决： 
参考：
- Swift: https://github.com/DanisFabric/RainbowNavigation

UINavigationBarExtension.swift

    //
    //  UINavigationBarExtension.swift
    //  GuitarFere
    //
    //  Created by youxinyu on 16/5/9.
    //  Copyright © 2016年 yogayu.github.io. All rights reserved.
    //

    import UIKit

    private var kBackgroundViewKey = &quot;kBackgroundViewKey&quot;
    private var kStatusBarMaskKey  = &quot;kStatusBarMaskKey&quot;

    extension UINavigationBar {

        public func df_setStatusBarMaskColor(color: UIColor) {
            if statusBarMask == nil {
                statusBarMask = UIView(frame: CGRect(x: 0, y: -20, width: UIScreen.mainScreen().bounds.width, height: 20))
                statusBarMask?.autoresizingMask = [.FlexibleWidth,.FlexibleHeight]
                if let tempBackgroundView = backgroundView {
                    insertSubview(statusBarMask!, aboveSubview: tempBackgroundView)
                }else {
                    insertSubview(statusBarMask!, atIndex: 0)
                }
            }
            statusBarMask?.backgroundColor = color
        }
        public func df_setBackgroundColor(color: UIColor) {
            if backgroundView == nil {
                setBackgroundImage(UIImage(), forBarMetrics: UIBarMetrics.Default)
                shadowImage = UIImage()
                backgroundView = UIView(frame: CGRect(x: 0, y: -20, width: UIScreen.mainScreen().bounds.width, height: 64))
                backgroundView?.userInteractionEnabled = false
                backgroundView?.autoresizingMask = [.FlexibleHeight,.FlexibleWidth]
                insertSubview(backgroundView!, atIndex: 0)
            }
            backgroundView?.backgroundColor = color

        }

        public func df_reset() {
            setBackgroundImage(nil, forBarMetrics: .Default)
            shadowImage = nil

            backgroundView?.removeFromSuperview()
            backgroundView = nil
        }

        // MARK: Properties
        private var backgroundView:UIView? {
            get {
                return objc_getAssociatedObject(self, &amp;kBackgroundViewKey) as? UIView
            }
            set {
                objc_setAssociatedObject(self, &amp;kBackgroundViewKey, newValue, .OBJC_ASSOCIATION_RETAIN)

            }
        }
        private var statusBarMask:UIView? {
            get {
                return objc_getAssociatedObject(self, &amp;kStatusBarMaskKey) as? UIView
            }
            set {
                objc_setAssociatedObject(self, &amp;kStatusBarMaskKey, newValue, .OBJC_ASSOCIATION_RETAIN)
            }
        }
}
</code></pre>

<p>在MainViewController中添加：</p>

<pre><code>    self.navigationController?.navigationBar.df_setBackgroundColor(UIColor.clearColor())
</code></pre>

<h3 id="toc_22">为什么点击按钮之后，图片位置会改变？</h3>

<p>改变UIButton的image之后，它的位置也会改变，需要将之前的先存储，改变图片之后再赋给它。</p>

<pre><code>CGPoint currentLoc = self.imageButton.center;
[self.imageButton setImage:[UIImage imageNamed:@&quot;face&quot;] forState:UIControlStateNormal];
self.imageButton.center = currentLoc;
</code></pre>

<p>好像不是这个问题。我把外面的View去掉一层就OK了。</p>

<h3 id="toc_23">UIScrollerView</h3>

<p>UIScrollerView的contentSize是取决于其子视图的，所以一定要通过子视图来限制其大小。<br/>
UIScrollerView需要探索的地方还很多，比如像相册这样的应用，是两个scrollerView，一个用来zoom，一个用来左右切换。</p>

<h1 id="toc_24">测试</h1>

<ul>
<li>TestFlight测试 （外部测试需审核）</li>
<li>其他第三方测试 （无需审核）</li>
</ul>

<h1 id="toc_25">发布</h1>

<ol>
<li>如何取好App名字？</li>
<li>如何写好App介绍？</li>
<li>制作App简短视频？</li>
</ol>

<h2 id="toc_26">网站</h2>

<p>因为也做过一些网站，用Bootstrap写过前端，PHP写过后台。基本的HTML/CSS，JS都会些，所以做网站对我来说没什么问题。不过，你不需要那么多知识，你可以在直接使用模板，再进行修改即可。</p>

<ul>
<li>选择模板</li>
<li>准备内容素材（图片、文字、链接）</li>
</ul>

<p>最终效果：<a href="http://azureyu.com/pulse">http://azureyu.com/pulse</a></p>

<h2 id="toc_27">截图</h2>

<p>素材：</p>

<ul>
<li>在设备上运行，同时按home+电源键进行截图</li>
<li>或者使用模拟器运行之后按Command+S,即可保持截图</li>
</ul>

<p>AppStore介绍截图制作：</p>

<ul>
<li>使用Sketch</li>
<li>推荐模板：<a href="https://github.com/LaunchKit/SketchToAppStore">https://github.com/LaunchKit/SketchToAppStore</a></li>
<li>思考介绍内容，编辑，修改，再修改，再修改</li>
<li>导出</li>
</ul>

<h2 id="toc_28">视频</h2>

<p>录制步骤：</p>

<ul>
<li>连接设备</li>
<li>打开QuickTime Player</li>
<li>进行文件影片录制</li>
<li>使用iMovie进行剪辑，iMove中可直接新建应用商店预览视频。</li>
</ul>

<p>Tips:</p>

<ul>
<li>视频上传需使用Safair浏览器，最好用iMovie中直接选择导出为应用商店预览视频。这样不会出现视屏帧数太多等问题。</li>
<li>如何旋转视频？使用QuickTime Player打开，然后在菜单中选择编辑，向左选择即可。</li>
</ul>

<p>最好将所有素材放在同一个文件夹中，按照一定的命名方式进行整理。</p>

<h2 id="toc_29">上传</h2>

<ul>
<li><a href="https://developer.apple.com/app-store/cn/">https://developer.apple.com/app-store/cn/</a></li>
<li><a href="https://itunespartner.apple.com/cn/apps/videos">https://itunespartner.apple.com/cn/apps/videos</a></li>
<li><a href="https://app.grammarly.com/">https://app.grammarly.com/</a>  避免英语文法错误</li>
</ul>

<h2 id="toc_30">介绍</h2>

<p>English:</p>

<pre><code>Pulse is a clean and beautiful Metronome. It helps you better your music feeling and skill. With Pulse, your play time will be much more joyful.

*****************************************************
Features:
* Colorful Themes. There are ten attractive themes that you can choose: night, tree, coffee, pink, azure, blue, purple...... make your play time more colorful. 
* Nice Sounds. You can hear the different kinds of sounds: wood, ping, claves, triangle, shaker, blocks......choice the one suit your ear.
* Save setlist. You can save the setlist that you often play, it&#39;s easy to use. 
* Swing. You can visualize the time passing, see the movements. In Pulse, there are 7 swing types: none, small, medium, large, ball, square, diamond. It always has the one you want.

Others:
- Play on the lock mood and background.
- Universal app, available on you iPod touch、iPhone and iPad.

*****************************************************

Support :
- E-mail: yxydiscovery@gmail.com
- Website: http://azureyu.com/pulse
- Twitter: https://twitter.com/yxydiscovery
- Weibo: http://weibo.com/yxydiscovery
</code></pre>

<p>中文：</p>

<pre><code>律动是一款简洁而美观的节拍器。它能够帮助你提升乐感和技能。缤纷的主题，悦耳的音色，可视化时间流逝的钟摆都能让你的练习更为多彩。

&gt;&gt;&gt; 特点：
* 十种主题缤纷主题任你选择：碳黑、咖啡、森林、粉红、蔚蓝、紫藤、翠绿等。
* 十余种悦耳音色舒适双耳：实木、沙铃、三角铁、铃环、木鱼、鼓、钢琴、铁、铛等。
* 一键保存演出列表：一键保持你的演出列表，节约你的时间，方便你的练习。
* 7种钟摆模式：无, 小, 中, 长, 球, 方, 菱。可视化时间流逝的最佳选择。

&gt;&gt;&gt; 其他：
- 支持锁屏播放和后台播放
- 支持屏幕常量
- 支持所有iPod Touch、iPhone和iPad设备


&gt;&gt;&gt; 反馈：
- E-mail: yxydiscovery@gmail.com
- Website: http://azureyu.com/pulse
- Twitter: https://twitter.com/yxydiscovery
- Weibo: http://weibo.com/yxydiscovery
</code></pre>

<hr/>

<h2 id="toc_31">被拒 5-24</h2>

<p>版本上传错误。</p>

<h3 id="toc_32">再次被拒</h3>

<p>Apple审核团队说App会在iPad Air下点击菜单按钮会crash，可是测试了很多次之后，我都没能重现crash，和他们沟通无果。等了两天，我在代码原封不动的情况下，重新build了一个版本，再上传，就通过了。</p>

<h3 id="toc_33">审核通过 6-1</h3>

<h1 id="toc_34">Market</h1>

<ul>
<li>产品推荐网站 :例如36NEXT,MindStore之类。</li>
<li>Weibo Twitter BBS</li>
</ul>

<p>用户会去哪些地方？</p>

<hr/>

<p>麻雀虽小，五脏俱全。虽只是一个简单的节拍器，也没用到复杂的算法和很难的技术。</p>

<p>但学习本就是从易到难的吧。重要的是有想法并去实现，然后不断去完善。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[重读]]></title>
    <link href="azureyu.com/2016-05-29-Reread.html"/>
    <updated>2016-05-29T22:54:30+08:00</updated>
    <id>azureyu.com/2016-05-29-Reread.html</id>
    <content type="html"><![CDATA[
<p>人们往往爱说，我最近读了几本书，却很少说，我最近重读了哪几本书。</p>

<p>而我认为，当你读书到一定量之后，你重读的书的数量，才决定了你读书的质量。</p>

<span id="more"></span><!-- more -->

<p></br></p>

<p>一本真正的好书值得重读，甚至是重读很多遍。每一遍你都会有新的感悟和发现。</p>

<p>书还是那本书，而你却不再是那个的你。<br/>
随着阅历和心智的成长，你会提出不同的问题，从不同的视角去切入。</p>

<p>重读，你是在读书，更是在读自己。</p>

<p>如果你重读一本好书之后，理解到的和以前相同，那么很可能你心智没有在成长。</p>

<p>当然，前提是那是一本好书。这样的好书，是不多的，而对于每一个人，这样的好书也是不同的。</p>

<p></br><br/>
拿《如何阅读一本书》举例，第一次读，读出了书中的阅读规则；第二次读，读出了教育、语言与思想的关系；第三次读，读出了什么是心智与理解。</p>

<p>再比如，像《菜根谭》这样的语录集。</p>

<p>初次读：</p>

<blockquote>
<p>彩笔描空，笔不落色，而空亦不受染；利刀割水，刀不损锷，而水亦不留痕。得此意以持身涉世，感与应俱适，心与境两忘矣。</p>
</blockquote>

<p>再等你经历了“空描”和“秋刀”之后，感受又会如何？</p>

<p></br><br/>
如果你之前读的书中，没有一本值得一读再读的书，那么你就要好好审视自己的书单了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己的谚语]]></title>
    <link href="azureyu.com/words.html"/>
    <updated>2016-05-28T21:20:13+08:00</updated>
    <id>azureyu.com/words.html</id>
    <content type="html"><![CDATA[
<p>《思考的整理术》中曾提到可以将自己的经验整理为自己的谚语，作为高度的总结。和自己常做的事，一拍即合，只是之前未给它们命名。现在想来，叫做“自己的谚语”确实有几分道理。</p>

<span id="more"></span><!-- more -->

<ul>
<li>  静而生慧。</li>
<li>阅读是思量。</li>
<li>追求智慧，而非知识。</li>
<li>“外禅而内定，是为禅定。”</li>
<li>“成功不必在我，功力必不唐娟。”</li>
<li>学以致用。理解，练习，应用，改进，重复。</li>
<li>实践出真知。花很多时间计划思考，不如去试错，不断调整。</li>
<li>关注情景&ndash;&gt;不要随意听取别人的意见或者建议(鳄鱼和壁虎)。</li>
<li>外界对你的认知和你对自己的认知不必相同，内心与外界要有一定距离。</li>
<li>人与人的关系很多(人情与面子)，感情亦然。</li>
<li>没有什么过不去，都是一时的机遇。得意时莫膨胀，失意时莫灰心。</li>
<li>先清楚你要做什么，然后去做。</li>
<li>想清楚自己的长处，发展自己的长处。</li>
<li>有话必说，无话不说。<br/></li>
<li>“ 独立之意识，自由之思想。”<br/></li>
<li>“You don&rsquo;t know what you have until it’s gone.”</li>
<li>尽量不要和别人讲人生道理，多数情况下讲了也没有，讲个故事吧。</li>
<li>拿出证据来，用事实说话。</li>
<li>不要总在“觉得”，要去“行动”去表现。Don&rsquo;t just tell it, show it.</li>
<li>欲速则不达，一步一步的认真去做，就是最快的捷径。</li>
<li>思考要有深度，广度。目光要放远。思想要集中。</li>
<li>要有完整作品。文章也好，项目也好。</li>
<li>理性生活，感性创作。</li>
<li>独处可以丰富。</li>
<li>科学不过是另一种宗教。</li>
<li>不同的时间有不同的烦恼，不要期待自己到达一个点之后就一切安好。</li>
<li>如果给你十个苹果，从最好的那个开始吃吧。</li>
<li>想做什么就去做什么吧，这真是最好的建议。你没做，只是想的事啊，多半不是真的想。</li>
<li>人与人之间的关系，是会随着时间空间以及彼此的内心变化而改变的。不可强求，不可强求，不可强求。</li>
<li> 个人的力量是有限的，要有燃烧其他人热情的能力，要有让他人相信你的能力，要有智慧，有主见，远见。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[跟随自己的心去选择]]></title>
    <link href="azureyu.com/choose.html"/>
    <updated>2016-05-25T15:53:33+08:00</updated>
    <id>azureyu.com/choose.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>去年写的文章，翻出来看看。感觉很温暖，希望依旧有定力吧。</p>
</blockquote>

<p>小时候爱看多啦A梦，四次元口袋里，总有神奇道具。</p>

<p>记得有一集，是讲未来望远镜。通过这个望远镜，你可以看到未来自己将要发生的事情。大熊迫不及待的开始使用望远镜。他看到了自己将有很好的运气，父亲还会带自己去看烟花。大熊越看越开心，舍不得放下，等到他放下望远镜的时候，时间已经不早了。他满心欢喜的去找父亲，却没有听到要带自己出去的消息。</p>

<p>大熊一脸失落的问哆啦A梦为什么。哆啦A梦说：“因为你把原本事情应该发生的时间，用来看望远镜了，改变了原本的事件，所以也就改变了未来的事件。”（这样看来要有多个未来，不然不合理）</p>

<span id="more"></span><!-- more -->

<p>我们每个人都多少有这样的期待，站在选择的分岔路口上，可以预见未来，预知哪一个选择将会最好。 </p>

<p>我们会纠结于选择，花大量的时间在重要的人生决定上。比如，选什么学校？读什么专业？在哪里工作？要不要跳槽？Ta和Ta谁更适合我？要不要结婚？要不要买房？</p>

<p>我们沉浸于选择，而忘记时间一刻不停。事情是发生时间里，时间即是你的生命。</p>

<p>何必花大量的时间纠结于走哪一条路，到最后，只会发现自己还停在原地。</p>

<p>想清楚自己选择的标准是什么，然后在一定的时间里作出决定。而不是犹豫不决，左顾右盼，脑补着每个选择将遇见的困难，每个选择将带来的美好。到最后没了时间，也没了选择。</p>

<p>思考一定要有，期待一定要有，顾虑一定要有。但是，一超度，你就会失去原本属于你的美好。</p>

<p>大大小小的欲望很多，与其花时间纠结满足哪一个愿望。不如现在就开始去实现最渴望的那个愿望。一个一个来，实在不行就换一个次一些渴望的愿望。</p>

<p>而往往我们极想要的，又都是我们目前不可得的。</p>

<p>如果决定了想要，就一步一步的去靠近，就一步一步的去争取，没有必要困顿于自己的想象之中。</p>

<p>只是，你知道自己选择的标准是什么吗？你知道怎么评估自己的欲望吗？</p>

<p>要知识？要财富？要名誉？要内心的平和？要快乐？要健康？要影响力？</p>

<p>你说你想要这想要那，谁不会想？要么你就多想几步，深入进去，要么你就去实践尝试。最可怕的是，总停留在表面思考还什么都不去尝试。是随波逐流？大多数人这样想，所以我也这样想？是独立思考？我有我自己的路要走？这两者没有绝对的好坏。</p>

<p>怎么样才能知道自己喜欢什么？最重要的是对自己诚实。喜欢丰子恺的一句话：一个彻底诚实的人是从不面对选择的，那条路会永远清楚无二的呈现在你的面前。</p>

<p>问一问自己，你想要的究竟是什么呢？</p>

<p>而得到只是一瞬间的事，是一瞬间的感觉。无法持久。真正重要的，是你在追求“得到”这个点的过程中，你的经历，你的感受，你的成长。</p>

<p>人生，持续不断的是意义。</p>

<p>2015-11</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让你的App说出多国语言——iOS开发之本地化(国际化)]]></title>
    <link href="azureyu.com/2016-05-14-iOS-Localizable.html"/>
    <updated>2016-05-14T16:37:28+08:00</updated>
    <id>azureyu.com/2016-05-14-iOS-Localizable.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">本地化的重要性</a>
</li>
<li>
<a href="#toc_1">如何本地化？</a>
<ul>
<li>
<a href="#toc_2">Info.list</a>
</li>
<li>
<a href="#toc_3">Storyboard/Xib</a>
</li>
<li>
<a href="#toc_4">Code String</a>
</li>
<li>
<a href="#toc_5">XML</a>
</li>
</ul>
</li>
<li>
<a href="#toc_6">参考</a>
</li>
</ul>


<span id="more"></span><!-- more -->

<h2 id="toc_0">本地化的重要性</h2>

<p>当你的App上架AppStore之后，便可以在全球范围内销售了。<br/>
如果想App在世界各地更畅销，那么本地化一定是不可少的。</p>

<p>本文将简明的从Info.list、Storyboard、Code String和XML四种方式来讲解本地化。</p>

<p>Info.list即将一些基本设置本地化，例如App在主屏幕显示的名称；Storyboard即界面显示内容的本地化；Code String则是你在代码中设置的一些语句的本地化，比如通知提醒等；最后一种XML方式则更为通用，直接将需要本地化的内容导出，修改之后再导入。</p>

<p>当然，本文只涉及本地化的技术层面，而不涉及具体如何翻译。</p>

<h2 id="toc_1">如何本地化？</h2>

<h3 id="toc_2">Info.list</h3>

<p>本地化App名</p>

<p>选中Info.plist,如图点击添加：</p>

<p><img src="media/14632150485486/Info_plist1.png" alt="Info_plist1"/></p>

<p>添加Bundle display name，Value为App名。</p>

<p><img src="media/14632150485486/Info_plist2.png" alt="Info_plist2"/></p>

<p>新建String File类文件，命名为InfoPlist，注意命名的大小写。</p>

<p><img src="media/14632150485486/location3.png" alt="location3"/></p>

<!-- more -->

<p>选中新建的文件，InfoPlist.strings，在Xcode的File inspection中点击Localize。<br/>
<img src="media/14632150485486/InfoPlist_strings4.png" alt="InfoPlist_strings4"/></p>

<p>当然，本地化内容之前，需要添加将本地化的语言。</p>

<p>编辑Project，在Info下，如图点击添加：</p>

<p><img src="media/14632150485486/5.png" alt="5"/></p>

<p>即可添加你想本地化的语言。</p>

<p>然后在目录中你会看到：</p>

<p><img src="media/14632150485486/6.png" alt="6"/></p>

<p>编辑InfoPlist.strings即可设置。格式为：</p>

<pre><code>&quot;Key&quot; = &quot;Value&quot;;
</code></pre>

<p>因为是C语言风格，记得加<strong>分号</strong>。</p>

<p>举个例子，本地化我们的App名，首先需要知道Key。</p>

<p>选中info.plist，在任意条目中右击，如图进行选择：</p>

<p><img src="media/14632150485486/Info_plist7.png" alt="Info_plist7"/></p>

<p>你将看见：</p>

<p><img src="media/14632150485486/Info_plist8.png" alt="Info_plist8"/></p>

<p>复制粘贴到InfoPlist.strings</p>

<pre><code>&quot;CFBundleDisplayName&quot; = &quot;GuitarFere&quot;;
</code></pre>

<p>对于不同语言，在对于的InfoPlist.strings中修改对应Value即可。</p>

<p>比如：</p>

<pre><code>&quot;CFBundleDisplayName&quot; = &quot;吉他伴侣&quot;;

&quot;CFBundleDisplayName&quot; = &quot;吉他伴侶&quot;;

&quot;CFBundleDisplayName&quot; = &quot;ギターコンパニオン&quot;;
</code></pre>

<h3 id="toc_3">Storyboard/Xib</h3>

<p>同理，首先选择要本地化的Storyboard，在File inspection中点击Localize，如果你在前一步中已经将Storyboard本地化，则可以跳过此步。</p>

<p><img src="media/14632150485486/Main_storyboard1.png" alt="Main_storyboard1"/></p>

<p>Xcode会自动为你生成对应的Key-Value，对应修改即可：</p>

<p><img src="media/14632150485486/Main_strings2.png" alt="Main_strings2"/></p>

<p>option+Command+return快捷键，选择preview：</p>

<p><img src="media/14632150485486/Main_storyboard3.png" alt="Main_storyboard3"/></p>

<p>点击右下角语言，预览效果：</p>

<p><img src="media/14632150485486/9.png" alt="9"/></p>

<h3 id="toc_4">Code String</h3>

<p>有时候，你想要本地化的内容是在代码中指定的。</p>

<p>首先，在代码中将你要本地化的字符串，使用如下进行定义</p>

<pre><code>NSLocalizedString(&quot;Key&quot;, comment: &quot;comment&quot;)
</code></pre>

<p>比如：</p>

<pre><code>fun loadSampleSettingList()  {
    let help_1 = NSLocalizedString(&quot;help_1&quot;, comment: &quot;Saved settings&quot;)
    let help_2 = NSLocalizedString(&quot;help_2&quot;, comment: &quot;Press + to add&quot;)
    let help_3 = NSLocalizedString(&quot;help_3&quot;, comment: &quot;Swipe left to delete&quot;)

    let setting_1 = SettingList(tempo: 80, beat: 4, note: 4,
                                handlePoint: 144, name: help_1)!
    let setting_2 = SettingList(tempo: 100, beat: 8, note: 4,
                                handlePoint: 181,name: help_2)!
    let setting_3 = SettingList(tempo: 120, beat: 3, note: 4,
                                handlePoint: 216, name: help_3)!

    settingList += [setting_1,setting_2,setting_3]
}
</code></pre>

<p>再比如：</p>

<pre><code>@IBAction fund mailBtnDidTouched(sender: AnyObject) {
    let sendTitle = NSLocalizedString(&quot;sendFeedback&quot;, comment: &quot;send feedback to me&quot;)
    let sendMessage = NSLocalizedString(&quot;sendMessage&quot;, comment: &quot;send feedback message&quot;)
    let okTitle = NSLocalizedString(&quot;Send_Ok&quot;, comment: &quot;accept to send&quot;)
    let cancel = NSLocalizedString(&quot;Cancel&quot;, comment: &quot;cancel send&quot;)

    let alert = UIAlertController(title: sendTitle, message: sendMessage, preferredStyle: UIAlertControllerStyle.Alert)
    self.presentViewController(alert, animated: true, completion: nil)
    let defaultAction = UIAlertAction(title: okTitle, style: UIAlertActionStyle.Default) { (UIAlertAction) -&gt; Void in

        let email = &quot;yudelovesong@icloud.com&quot;
        let url = NSURL(string: &quot;mailto:\(email)&quot;)
        UIApplication.sharedApplication().openURL(url!)
    }
    let cancelAction = UIAlertAction(title: cancel, style: UIAlertActionStyle.Cancel, handler: nil)

    alert.addAction(defaultAction)
    alert.addAction(cancelAction)
}
</code></pre>

<p>然后，同理，新建一个String File类文件，命名为Localizable，注意命名的大小写。</p>

<p>现在你需要写对应的Key-Value，有没有想过，如果你有很多需要本地化的字符串，纯手写Key-Value是一件很麻烦的事情？所以我们可以使用自动生成的方式。</p>

<p>打开终端，输入：</p>

<pre><code>gensstrings 
</code></pre>

<p>空格之后，在Finder中将你含有本地化字符串的文件拖入终端（当然，你也可以手写自动遍历）</p>

<p><img src="media/14632150485486/genstrings.png" alt="genstrings"/></p>

<p>回车执行，在对应的Finder目录中，会生成Localizable.strings文件：</p>

<p><img src="media/14632150485486/genstringsSting.png" alt="genstringsSting"/></p>

<p>该文件内容即自动生成的Key-Value。</p>

<h3 id="toc_5">XML</h3>

<p>最后一种方式，不需要你手动的去选择和添加文件，可以直接导出所有需要本地化的内容为XML，进行更改，最后再导入即可。</p>

<p>选中项目之后（不要忘记这一点），在Editor中选中Export For Localization：</p>

<p>导出之后的文件：<br/>
<img src="media/14632150485486/GuitarFere.png" alt="GuitarFere"/></p>

<p>编辑对应的文件：</p>

<p><img src="media/14632150485486/zh-Hans_xliff.png" alt="zh-Hans_xliff"/></p>

<p>完成之后，再进行导入：</p>

<p><img src="media/14632150485486/Editor_%E5%92%8C_Menubar.png" alt="Editor_和_Menuba"/></p>

<p><img src="media/14632150485486/%E6%88%AA%E5%B1%8F16_5_15_%E4%B8%8B%E5%8D%885_47.png" alt="截屏16_5_15_下午5_47"/></p>

<p>最后，以上四种方式，什么时候使用哪一种，按自己的需求选择就可以了。</p>

<h2 id="toc_6">参考</h2>

<blockquote>
<ul>
<li><a href="https://developer.apple.com/videos/play/wwdc2014/412/">WWDC 2014 412</a></li>
<li>iOS Programming Foundation with Swift Chapter 9</li>
</ul>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello MWeb]]></title>
    <link href="azureyu.com/2016-05-10-HelloMWeb.html"/>
    <updated>2016-05-10T18:24:17+08:00</updated>
    <id>azureyu.com/2016-05-10-HelloMWeb.html</id>
    <content type="html"><![CDATA[
<p>作为重度Markdown使用者，个人很喜欢MWeb。决定将博客从Jekyll转为MWeb生成。</p>

<p>下面是简单的步骤。</p>

<span id="more"></span><!-- more -->

<ol>
<li><p>在外部模式下(Command+L),新建分类并导入</p>

<p><img src="media/14628758572486/MWeb-import.png" alt="MWeb-import"/></p></li>
<li><p>点击编辑设置网站信息</p>

<p><img src="media/14628758572486/MWeb-edit.png" alt="MWeb-edit"/></p>

<p>依次填写就可以了。<br/>
高级设置中可以修改网站生成位置。<br/>
<img src="media/14628758572486/MWeb-Setting.png" alt="MWeb-Setting"/></p></li>
<li><p>添加分类</p>

<p><img src="media/14628758572486/Meb-classify.png" alt="Meb-classify"/></p>

<p>将文章拖入对应的分类</p>

<p><img src="media/14628758572486/class.gif" alt="class"/></p>

<p>设置每篇文章信息：</p>

<p><img src="media/14628758572486/MWeb-date.png" alt="MWeb-date"/></p></li>
<li><p>生成网站</p>

<p><img src="media/14628758572486/MWeb-WebGen.png" alt="MWeb-WebGen"/>     </p></li>
<li><p>高级设置</p></li>
</ol>

<p>可以自定义扩展：<br/>
将如下代码存为DoucmentExtension.json</p>

<pre><code>[{&quot;title&quot;:&quot;small omg&quot;,&quot;variableName&quot;:&quot;small_image&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;small image path&quot;},{&quot;title&quot;:&quot;featured&quot;,&quot;variableName&quot;:&quot;featured_image&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;featured image path&quot;},{&quot;title&quot;:&quot;excerpt&quot;,&quot;variableName&quot;:&quot;excerpt&quot;,&quot;inputFieldHeight&quot;:66,&quot;exampleText&quot;:&quot;&quot;},{&quot;title&quot;:&quot;sen KW&quot;,&quot;variableName&quot;:&quot;so_keywords&quot;,&quot;inputFieldHeight&quot;:44,&quot;exampleText&quot;:&quot;sen keywords&quot;},{&quot;title&quot;:&quot;sen Des&quot;,&quot;variableName&quot;:&quot;seo_des&quot;,&quot;inputFieldHeight&quot;:66,&quot;exampleText&quot;:&quot;sen description&quot;}]
</code></pre>

<p>在文档扩展中导入：</p>

<p><img src="media/14628758572486/setting.png" alt="setting"/></p>

<p>同理，将一下代码存为SiteExtension.json</p>

<pre><code>[{&quot;title&quot;:&quot;logo path&quot;,&quot;variableName&quot;:&quot;logo_path&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;240x240&quot;},{&quot;title&quot;:&quot;twitter&quot;,&quot;variableName&quot;:&quot;twitter_url&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;your twitter url&quot;},{&quot;title&quot;:&quot;github&quot;,&quot;variableName&quot;:&quot;github_url&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;your github url&quot;},{&quot;title&quot;:&quot;weibo&quot;,&quot;variableName&quot;:&quot;weibo_url&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;your weibo url&quot;},{&quot;title&quot;:&quot;Facebook&quot;,&quot;variableName&quot;:&quot;facebook_url&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;your Facebook url&quot;},{&quot;title&quot;:&quot;stack overflow&quot;,&quot;variableName&quot;:&quot;stackoverflow_url&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;your stack overflow url&quot;},{&quot;title&quot;:&quot;linked&quot;,&quot;variableName&quot;:&quot;linkedin_url&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;your linked url&quot;},{&quot;title&quot;:&quot;pinterest&quot;,&quot;variableName&quot;:&quot;interest_url&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;your pinterest url&quot;},{&quot;title&quot;:&quot;quota&quot;,&quot;variableName&quot;:&quot;quora_url&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;your quota url&quot;},{&quot;title&quot;:&quot;google&quot;,&quot;variableName&quot;:&quot;google_url&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;your google plus url&quot;},{&quot;title&quot;:&quot;instagram&quot;,&quot;variableName&quot;:&quot;instagram_url&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;your instagram url&quot;},{&quot;title&quot;:&quot;email&quot;,&quot;variableName&quot;:&quot;email&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;your email&quot;},{&quot;title&quot;:&quot;disqus&quot;,&quot;variableName&quot;:&quot;disqus_shortname&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;disqus short name&quot;},{&quot;title&quot;:&quot;duoshuo &quot;,&quot;variableName&quot;:&quot;duoshuo_shortname&quot;,&quot;inputFieldHeight&quot;:22,&quot;exampleText&quot;:&quot;duoshuo short name&quot;}]
</code></pre>

<p>在网站扩展中导入</p>

<p><img src="media/14628758572486/%E8%AE%BE%E7%BD%AE2.png" alt="设置2"/></p>

<p>最后在偏好设置中设置信息</p>

<p><img src="media/14628758572486/%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE3.png" alt="偏好设置3"/></p>

<p>其实就是把很多之前文档配置的内容，转化为了GUI展现。</p>

<p>Jekyll用多了，再用这些其实都很简单。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[四月记]]></title>
    <link href="azureyu.com/2016-05-01-April.html"/>
    <updated>2016-05-10T14:36:11+08:00</updated>
    <id>azureyu.com/2016-05-01-April.html</id>
    <content type="html"><![CDATA[
<p>四月天气也是奇怪，前一天人们还穿着短袖，后一天就披上棉袄。<br/>
开始和队友一起做项目，每天都往返于学院楼和寝室。<br/>
最近去学院楼的时间，都比去上课的时间要多了。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">阅读</h2>

<ul>
<li>人生的智慧 叔本华</li>
<li>The English Patience</li>
<li>iOS Programming</li>
<li>摄影的艺术</li>
<li>The Student Writer</li>
<li>少有人走的路</li>
<li>How to study 读书笔记</li>
</ul>

<h3 id="toc_1">人生的智慧，叔本华</h3>

<p>看了推荐的文章，决定读一读。叔本华出生于一个显赫家庭，父亲是成功的商人，母亲是作家。十几岁时就随家人游历世界。从小性格孤僻，同时表现出极高的思想力。二十几岁时，出版自己的哲学著作，奠定了一派的哲学基础。之后时间里，不断的在修修补补。他几乎是一夜成名。年轻时，没有得到赏识，甚至可以说是遭到同行的“封杀”。直到暮年，出版了《人生的智慧》之后，才得到其应有的名誉。</p>

<p>人生的智慧，写作从世人的角度出发，谈论决定人一生幸福的要素。</p>

<p>叔本华认为，决定我们人生是否幸福，主要从三个方面。第一，人的自身；第二，身外之物；第三，他人对我们的看法。他认为最重要的是第一点即我们自身。而相对而言，第二第三点都影响不大。</p>

<p>看此书要取其精华，去其糟粕。比如，个人完全不同于作者对女子的态度。</p>

<h3 id="toc_2">摄影的艺术</h3>

<p>对自我的探索</p>

<ul>
<li>你对什么感兴趣？</li>
<li>你想要表达什么？</li>
</ul>

<p>摄影是一种表达，为不仅仅是记录。<br/>
摄影：主题、主体、简洁。</p>

<h3 id="toc_3">iOS Programming</h3>

<ul>
<li>一个App是如何开始运行的？</li>
</ul>

<h3 id="toc_4">少有人走的路 心理学</h3>

<p>这一本书的名字，我目前还没发现其与内容的联系。<br/>
这是一本讲心理学的书，作者论述的方式，是举生活和科学实验的例子，再得出结论。<br/>
一般很多这样论述的书，我都不太入眼，这一本却不同。<br/>
因为你可以从各种例子中看见你自己，看见你身边的人。从而受到启发。<br/>
第一部分是讲自律，以及其对应的四个要素。<br/>
第二部分是讲爱。</p>

<p>也许是因为翻译的原因，有些字面意与平时的理解不同，要注意。比如坠入情网。</p>

<h3 id="toc_5">How to study</h3>

<p>把它完整的用中文翻译了要点，下一步就需要好好地用中文的表达方式再写一遍了。</p>

<p>已完成最终笔记，发布博文。</p>

<h2 id="toc_6">开发</h2>

<ul>
<li>写网站 Thinkphp + Bootstrap (真的快全端通了。。)</li>
<li>货运达APP</li>
</ul>

<h2 id="toc_7">Medium</h2>

<ul>
<li>House of Cards </li>
<li>我是歌手</li>
<li>荒野猎人</li>
<li>卡罗儿</li>
<li>欢乐颂</li>
</ul>

<h2 id="toc_8">学校</h2>

<p>人机交互设计和项目管理结课。</p>

<ul>
<li>前两门准备考试</li>
<li>数字摄影课，数据挖掘课开始</li>
</ul>

<h2 id="toc_9">第一周</h2>

<p>买了iPad mini2。</p>

<ul>
<li>准备英语竞赛</li>
<li>统筹小组开发</li>
<li>写网站 写网站 写网站</li>
</ul>

<h2 id="toc_10">第二周</h2>

<p>买了MWeb，支持独立开发者吧。</p>

<ul>
<li>参加英语竞赛，没发挥好</li>
<li>统筹小组开发</li>
<li>写网站 写网站 写网站</li>
</ul>

<p>如何使用Thinkphp，如何使用Bootstrap，如何使用Bootstrap Table，如何提交表单信息，如何使用省市联动插件，如何用模板标签显示，如何响应事件，如何进行跳转，如何使用模态显示。</p>

<h2 id="toc_11">第三周</h2>

<ul>
<li>周一，约老师见面</li>
<li>复习人机交互，项目管理，用思维导图整理要点</li>
<li>周三开始写APP</li>
</ul>

<h2 id="toc_12">第四章</h2>

<ul>
<li>两门期末考试</li>
<li>写货运达APP</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[教育使人获得精神力量——《如何学习》阅读笔记]]></title>
    <link href="azureyu.com/2016-04-24-HowToStudy.html"/>
    <updated>2016-05-10T14:36:11+08:00</updated>
    <id>azureyu.com/2016-04-24-HowToStudy.html</id>
    <content type="html"><![CDATA[
<p>大学与其说实在学习具体的学科，不如说是在学习<strong>如何学习</strong>。<br/>
关于学习，有两门书对我的影响极大。这两本书前前后后读了不下4遍，平时也在不断重温。</p>

<p>第一本，极有名气，是<strong>《如何阅读一本书》(《How to read a book》)</strong>。初看是在高三暑假，现在大三，还在读。第一次读是了解大概，之后都带着不同的中心问题的重读。</p>

<p>另一本，我从未听过任何人的推荐，可谓是冷门，却是我眼中的经典之一。即是<strong>《如何学习》(《How to study》)</strong>，出版于1971年，作者George Fillmore Swain。</p>

<span id="more"></span><!-- more -->

<p>称它为一门书，其实更像一门小册子。从精神态度、理解性学习、系统性学习和习惯方法四个方面出发，提出了如格言似的建议。</p>

<p>《如何阅读一本书》自己读着是越读越薄，而第二本书《如何学习》却是越读越厚，不断的在稀释。</p>

<p>以下是读书笔记，是理解性翻译的原文。</p>

<blockquote>
<p>For the end of education and training is to help nature to her perfection in the complete developing of all the various powers.——Richard Mulcaster,1522-1611</p>
</blockquote>

<p>作者认为，教育是一种机会。它的目的给人以心智上的力量(Power)[1]。而这种力量只能由学生自己习得。唯一真正的教育是自我教育，老师能做的只是让学生知道他自己能够做到。</p>

<p>对学生而言，最重要的事情之一，即是如何学习。<br/>
懂得如何学习的重要性显而易见。相对于整个人类庞大的知识而言，一个学生在大学里所能学到的，完全是微不足道。另外，学生很难遇见将来自己会从事什么工作。因此，如果他的教育没有教会他，在面对一个新的学科新的问题，如何进行学习并且掌握，那么教育对他而言益处极少，也很难使他适应自己未来所选的职业。</p>

<p>从广义上来说，我们探讨的问题是：“如何研究一个问题”(how to investigate a problem)。</p>

<p>[1]教育是功利的，但是是广义上的功利，它的目的是给人以心智上的力量。这种力量使人生活更为愉悦，提升满足感，拓宽视野等等。</p>

<h1 id="toc_0">正确的精神态度(The Proper Mental Attitude)</h1>

<p>作者认为，首先需要的是正确的精神态度。不要盲目相信，要有精神上的勇气和决心。勇气，是去掌握书本的勇气。决心，是去运用自己心智的决心。写在书本上不一定就是真的，只有经过思量，经过他自己理解，他才能接受。就像中国的一句古话——“尽信书不如无书”。</p>

<p>当然，因为时间原因，不可能一一的去验证。有时候你要先相信所读陈述(statement)。<em>但是，你也需要努力思索，这些内容是少数的事实(mere fact)，是定义(definition)，还是有其原因(reason)。</em> 如果现在还无法理解原因，你应该暂时性的接受这些陈述，在之后不断探寻答案。</p>

<h2 id="toc_1">(a) 学生必须清晰地区分阅读和理解。——只是阅读，不管多广泛，记忆力多强，都无法给与智慧或力量。</h2>

<p>只是阅读词语和句子，而没有去理解，去思索，并将内容转化为自己的理解，这样的阅读是无用的，甚而会导致精神伤害。时常要警惕自己，要么理解性的阅读，要么放下手中的书本，去做其他的事，比如锻炼或娱乐。不在于你花了多长的时间，还要看你的专注程度以及思考密度。</p>

<blockquote>
<p>学而不思则，思而不学则殆</p>

<p>It is not what is read or what is remembered, but only what is understood, that gives power.</p>
</blockquote>

<h2 id="toc_2">(b) 学生必须清晰地从结论或观点中分辨出少数的事实。</h2>

<p>你可以接受由可信的权威发布的事实。<br/>
从同一事实可以推断出不同的结论和观点；逻辑上的结论和少数的观点亦是非常不同的。<br/>
有一些结论，比如数理逻辑上的结论，在没有实验和观察的情况下，也能够推论出来。要把这一些结论或真理与需要基于事实、实验或观察的结论相区分。</p>

<p>不断的训练你自己的识别力(discrimination)，对于正确的学习是重要的。</p>

<h2 id="toc_3">(c.) 学生的应该在头脑中持续的审问(interrogation)要点。</h2>

<p>不管在阅读什么，对于你读到的陈述，你应该不断的问自己，这其中有原因吗？如果有原因，是来自事物内在的，还是来自作者观察到的事实？如果是事物内在，那么你就尝试独立地得出结论。</p>

<p>对于成立的事实，你要努力的去察觉原因。阅读时，需要不停地区别，询问，列出要点，对于你目前理解其原因的内容，不用陷得太深，先存疑放在那里。</p>

<p>比如，随着科技的发展，很多原始世界无法解释的自然现象，现在都有了清晰的解释。</p>

<p>聪明的学生普遍能够区分各种描述不同的陈述，并且通过与自己已有的知识结构体系相结合，不断努力的去解释和理解。遗憾的是，多数学生都只是单纯的接受。他们不为自己思考，能使他们信服你所说的唯一要素是告诉他们你是权威。</p>

<h2 id="toc_4">(d) 阅读目前还无法调查原因的事实时，应该询问这些事实是如何被查明的。</h2>

<p>这样的思考，可以使你关注观察、实验的方法，或者该学科的技术。</p>

<h2 id="toc_5">(e) 每一个学生都应该锻炼，在他学习的作者那，不断观察证据的可靠性。以此来保证他能够接到一个正确的影响，判断他的事实和陈述或观点和结论可能被接受。</h2>

<p>每一个学生都应该训练自己，对自己所学习的作者的可靠性进行思考。以此来保障作者所说的事实和陈述点或观点和结论可能是正确的。</p>

<blockquote>
<p>Some books are to be tasted, others to be swallowed, and some few to be chewed and digested.——Bacon</p>
</blockquote>

<h2 id="toc_6">(f) 另外一个正确学习的精神态度的要素是谨慎。</h2>

<p>人无完人，你自己可能犯错，同样的，你阅读的作者也可能犯错。</p>

<blockquote>
<p>Read not to contradict and to confute, nor to believe and take for granted, nor to find and discourse, but to <strong>weight and consider</strong>.—— Bacon</p>
</blockquote>

<h2 id="toc_7">(g) 以开放的心态学习，不要有预先形成的观点。</h2>

<h2 id="toc_8">(h) 理智的谦逊，使自己爱上真理。</h2>

<p>正确看待自己知识的局限性，看清自己知道什么不知道什么。</p>

<blockquote>
<p>知之为知之，不知为不知，是知也。</p>

<p>He who knows not, and knows not that he knows not, is a fool; shun him.<br/>
He who knows not, and knows he knows not, is a child; tech him.<br/>
He who knows, and knows not that he knows, is asleep; wake him.<br/>
He who knows, and knows that he knows, is wise; follow him.</p>
</blockquote>

<h2 id="toc_9">（i）请记住学习是为了获得智慧而不仅仅是知识。</h2>

<h1 id="toc_10">理解性学习</h1>

<p>相比于具体名词，我们如何理解抽象名词的含义？<br/>
很多人养成了不仔细的审视名词的确切含义，而使用它们的坏习惯。</p>

<h2 id="toc_11">(a) 锻炼下定义的习惯。</h2>

<p>你不能满足于模糊的，不明确的，不完整的概念。<br/>
可以尝试一些方法：</p>

<ol>
<li>学习字典。在翻译中应用字典。相比将外语翻译为自己的母语，学习将古文翻译为现代文，可能更为适合。</li>
<li>每天为几个词下定义，然后与字典相比较。很快就会发现，虽然一个名词能有不同的说法，但只有一个最为准确。</li>
<li>学习逻辑学。（个人认为可以看看简明逻辑学）</li>
</ol>

<h2 id="toc_12">(b) 从不同的方式或角度来陈述一件事。</h2>

<p>只有你真正的理解了，你才能给准确无误的传达给其他人，让他们也能明白。所以人们说教师最好的学吧。</p>

<h2 id="toc_13">(c.) 从正反两面来陈述一件事。</h2>

<h2 id="toc_14">(d) 在学习一个陈述(statement)时，观察哪些词语是必要的哪些是可删除的。</h2>

<p>揣摩用词。注意使用什么样的词汇来传递要表达的含义。什么样的词组合构成了该事物。</p>

<h2 id="toc_15">(e) 对阅读内容进行深思：在开始下一点之前，举例说明或者应用已得到的结论。</h2>

<p>检查自己是否真的理解结论的一种方式是应用它。将它尽可能多的应用到不同例子中去。</p>

<h2 id="toc_16">(f) 保持头脑的活跃和机敏。</h2>

<p>不要只是坐在那里凝视着书本。学习需主动，间歇性的休息也是必要的。</p>

<h2 id="toc_17">(g) 当你遇见同一学科不同的观点时，思考是什么原因使得有才智的人得到了不同的结论。</h2>

<h2 id="toc_18">(h) 记住陈述不是证明。许多学生认为他们可以通过用不同的方式重复陈述来证明它。</h2>

<h1 id="toc_19">系统性学习是正确学习的第三点</h1>

<h2 id="toc_20">(a) 发现学科的基础概念。</h2>

<p>跳过细节直达事物根本。看见真正的要点。其余的自然能与主干相连。</p>

<p>知识的大树，你要先把握其主干。</p>

<blockquote>
<p>Learn something accurately, and refer the rest to that.—— Jacotot</p>
</blockquote>

<p>一个知道如何正确学习的人，能够选出包含该学科关键的句子或者段落——基础的事实和原理——并且会不断的重读直到完全理解。</p>

<h2 id="toc_21">(b) 在你开始学习一个学科之前， 仔细的思考并找出你已经知道的内容或你能够通过自己的努力理解的内容。</h2>

<p>想一想你的期望，还有和你已经学到的知识的联系，发现其有什么应用。</p>

<h2 id="toc_22">(c.) 对你已学内容进行分类。</h2>

<p>当你学完了一门课程，停下来想一想它覆盖了哪些内容，整理出各个要点。做出目录并和原有的目录比较。<br/>
联系观点，用自己的语言表达。时不时的闭上书本回想你已学到的内容。</p>

<h1 id="toc_23">精神主动性</h1>

<h2 id="toc_24">(a) 培养你学习的兴趣，和其引出的一些观点。</h2>

<p>如果对你所学感到没有丝毫兴趣，也看不见其价值。那么还不如不学，如果对于而言，只是在灌输，那么这样的文凭不要也罢。当然也不要只局限于你感兴趣的学科，那样会使你的头脑狭隘，缺乏智者的广度。</p>

<h2 id="toc_25">(b) 坚持先清晰地定义眼前的问题。</h2>

<h2 id="toc_26">(c.) 独立学习。</h2>

<p>自己解决问题。向老师寻求建议。出现错误要思考是什么原因并改进。<br/>
当发现错误时，你应该感激，因为它给了你机会去测试和提示自己的能力，避免将来的错误。</p>

<h2 id="toc_27">(d) 只要可能，在你知道作者的结论之前，尝试自己下结论。</h2>

<p>研究任何学科的过程都是问问题和解答的过程。</p>

<h2 id="toc_28">(e) 如果你无法知道作者是如何得出结论的，因为他没有指出他进行的过程，不要花太多时间去发现他如何做的，尝试着你是否能用自己的方式得到结论，以此来培养你自己的力量和主动性而不只是跟随作者。</h2>

<h2 id="toc_29">(f) 学会概括。</h2>

<h2 id="toc_30">(g) 超越书本。不要将书本视为学习的终点。</h2>

<h2 id="toc_31">(h) 将你的结论尽可能的可视化。</h2>

<h1 id="toc_32">正确的习惯和方法</h1>

<h2 id="toc_33">(a) 选出对你目的而言最好的书并彻底的学习它。</h2>

<p>什么是最好的书要根据你自己的实际情况。</p>

<h2 id="toc_34">(b) 不要一次性学太多学科。</h2>

<p>开始许多最后一事无成是个坏习惯。习得能将注意力在同一个学科上集中几小时的能力。</p>

<h2 id="toc_35">(c.) 不要急。</h2>

<p>花时间思考。</p>

<h2 id="toc_36">(d) 不要轻易的拿起一个学科，但是一旦拿起就不要无理由的放弃。</h2>

<h2 id="toc_37">(e) 习得明智的跳读能力。</h2>

<h2 id="toc_38">(f) 系统化。</h2>

<p>决定好了之后就不要犹豫。马上开始，周期性的在一段时间内同一件事情。持续不断的进步。</p>

<h2 id="toc_39">(g) 习得专注的力量。在相当长的一段时间内，将你的注意力集中于一件事。</h2>

<h2 id="toc_40">(h) 记得应用所学。</h2>

<h2 id="toc_41">(g) 对你做的事情感兴趣。</h2>

<h2 id="toc_42">(i) 一遍又一遍的阅读重要的事直到你完全理解。</h2>

<h2 id="toc_43">(k) 列出你阅读的参考。</h2>

<h2 id="toc_44">(l) 时常复习。</h2>

<h2 id="toc_45">(m) 为你的学习设定特别的时间。</h2>

<h2 id="toc_46">(n) 不要忽视身体锻炼。</h2>

<hr/>

<p>书中很多观点，中文都是有的，而且表达得更为精辟，比如：</p>

<blockquote>
<ul>
<li>学而不思则罔，思而不学则殆。</li>
<li>博学之，审问之，慎思之，明辨之，笃行之。</li>
<li>人尽其材，物尽其用。</li>
</ul>
</blockquote>

<hr/>

<p>PS:如果你感兴趣，可以在哪里看到？<br/>
- 图书馆<br/>
- 美区iTunes<br/>
<img src="http://upload-images.jianshu.io/upload_images/48181-45a608575a99e3b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iBooks_Store_—_Featured.png"/><br/>
- <a href="http://www.amazon.com/How-Study-George-Fillmore-Swain-ebook/dp/B004TRND72">Amazon</a></p>

<blockquote>
<p>Free Download <a href="http://digilibraries.com/ebook/how-to-study">Here</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Student Writer [Note]]]></title>
    <link href="azureyu.com/The-Student-Writer.html"/>
    <updated>2016-04-16T17:40:20+08:00</updated>
    <id>azureyu.com/The-Student-Writer.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Chapter 1 The Connection between Reading and Writing</a>
<ul>
<li>
<a href="#toc_1">Read Analytically</a>
<ul>
<li>
<a href="#toc_2">1. Step 1: Preview the Material</a>
</li>
<li>
<a href="#toc_3">2. Step 2: Read thoughtfully</a>
</li>
<li>
<a href="#toc_4">3. Step 3: Review and Write for Retention.</a>
</li>
</ul>
</li>
<li>
<a href="#toc_5">Writing a summary</a>
</li>
<li>
<a href="#toc_6">Sharing Person Reactions and Associations</a>
</li>
<li>
<a href="#toc_7">Evaluating the Author&#39;s Ideas</a>
</li>
<li>
<a href="#toc_8">Analyzing Visual Content</a>
</li>
</ul>
</li>
<li>
<a href="#toc_9">Chapter 2 Getting Started</a>
<ul>
<li>
<a href="#toc_10">The Writing Process</a>
</li>
<li>
<a href="#toc_11">Choosing A Writing Topic</a>
<ul>
<li>
<a href="#toc_12">Pay Attention to the World around you</a>
</li>
<li>
<a href="#toc_13">Freewrite(I love this way)</a>
</li>
<li>
<a href="#toc_14">Narrow A Broad Topic</a>
</li>
<li>
<a href="#toc_15">Write A List</a>
</li>
<li>
<a href="#toc_16">Considering the Patterns of Development</a>
</li>
<li>
<a href="#toc_17">Map Your Topic</a>
</li>
</ul>
</li>
<li>
<a href="#toc_18">Establishing Your Purpose</a>
</li>
<li>
<a href="#toc_19">Identifying And Assessing Your Audience</a>
</li>
<li>
<a href="#toc_20">Developing Ideas To Develop Your Topic</a>
</li>
<li>
<a href="#toc_21">Developing A Preliminary Thesis</a>
<ul>
<li>
<a href="#toc_22">The Qualities of an Effective Thesis</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_23">Organizing and Drafting</a>
<ul>
<li>
<a href="#toc_24">Ordering Ideas</a>
<ul>
<li>
<a href="#toc_25">Chronological Order</a>
</li>
<li>
<a href="#toc_26">Spatial Order</a>
</li>
<li>
<a href="#toc_27">Progressive Order</a>
</li>
<li>
<a href="#toc_28">Outlining</a>
</li>
</ul>
</li>
<li>
<a href="#toc_29">Writing Your First Draft</a>
<ul>
<li>
<a href="#toc_30">Structuring your essay</a>
</li>
<li>
<a href="#toc_31">The introduction</a>
</li>
<li>
<a href="#toc_32">Body Paragraphs</a>
</li>
</ul>
</li>
</ul>
</li>
</ul>


<span id="more"></span><!-- more -->

<h1 id="toc_0">Chapter 1 The Connection between Reading and Writing</h1>

<h2 id="toc_1">Read Analytically</h2>

<h3 id="toc_2">1. Step 1: Preview the Material</h3>

<p>Grasp the whole book. Get some information. Think about the author.</p>

<p>What questions it will answer? What information it will provide? What do you hope it tell you?</p>

<h3 id="toc_3">2. Step 2: Read thoughtfully</h3>

<ul>
<li>Thesis, audience and purpose.</li>
<li>Facts and opinion.</li>
<li>Make Inferences.</li>
<li>Make connections(your experience and knowledge). Mark the text.</li>
<li>Quality.</li>
<li>Draw conclusion. Mark the text.</li>
</ul>

<h3 id="toc_4">3. Step 3: Review and Write for Retention.</h3>

<ul>
<li>Reread the material you underline or highlighted. Understand it.</li>
<li>Review and reflect upon your material notes. Ask question.</li>
<li>Writing is an excellent way to &lsquo;set&rsquo; information so you remember it.</li>
</ul>

<h2 id="toc_5">Writing a summary</h2>

<ol>
<li>Underline or list the major ideas in the section.</li>
<li>Write an opening sentence that include the author&rsquo;s name, the title of the reading selection, and the thesis.</li>
<li>After the first use of the author&rsquo;s full name, refer to the author with his or her last name or with a pronoun.</li>
<li>You should use a present tense verb with the author&rsquo;s name.</li>
<li>Draft the body of the summary by writing in your own words and the style the major ideas you underline or listed.</li>
<li>If some of the main ideas are hard to express in you own words, quote them, but use quotation sparingly.</li>
<li>Revise to be sure you have not included ideas that did not appear in the original.</li>
<li>Check that you have used transitions to ease the flow from point to point, including repeating the author&rsquo;s name with a present-tense verb.</li>
</ol>

<h2 id="toc_6">Sharing Person Reactions and Associations</h2>

<h2 id="toc_7">Evaluating the Author&rsquo;s Ideas</h2>

<ul>
<li>Example</li>
<li>Exercise</li>
</ul>

<h2 id="toc_8">Analyzing Visual Content</h2>

<h1 id="toc_9">Chapter 2 Getting Started</h1>

<ul>
<li>Use your resources.</li>
<li>Remember writing is a process.</li>
<li>Think of yourself as a critic and an editor.</li>
<li>Understand the difference between professional writers and student writers.</li>
</ul>

<h2 id="toc_10">The Writing Process</h2>

<h2 id="toc_11">Choosing A Writing Topic</h2>

<h3 id="toc_12">Pay Attention to the World around you</h3>

<h3 id="toc_13">Freewrite(I love this way)</h3>

<ul>
<li>Do not stop.(5~10 minutes)</li>
<li>Record everything comes to mind.
<img src="media/14607996200348/freewrite.jpg" alt="freewrite"/></li>
</ul>

<h3 id="toc_14">Narrow A Broad Topic</h3>

<p>Narrow the topic to something that can be managed in a suitable length.<br/>
<img src="media/14607996200348/narrowTopic.jpg" alt="narrowTopi"/></p>

<h3 id="toc_15">Write A List</h3>

<h3 id="toc_16">Considering the Patterns of Development</h3>

<p><img src="media/14607996200348/process.jpg" alt="process"/></p>

<h3 id="toc_17">Map Your Topic</h3>

<h2 id="toc_18">Establishing Your Purpose</h2>

<p>Four Purpose:</p>

<pre><code>1. To `express` feelings or ideas to the reader and/or relate experiences.
2. To `inform` reader of something.
3. To `persuade` the reader to think or act with a certain way.
4. To `entertain` the reader.
</code></pre>

<p><strong>What-&gt;Why-&gt;How.</strong></p>

<p>This remained me of the book &ldquo;How can everybody make extrorindary persections&rdquo;</p>

<h2 id="toc_19">Identifying And Assessing Your Audience</h2>

<p>Like purpose, Audience shapes writing.<br/>
<img src="media/14607996200348/Audience.jpg" alt="Audience"/></p>

<h2 id="toc_20">Developing Ideas To Develop Your Topic</h2>

<p>Idea generation techniques:</p>

<ul>
<li>Freewrite</li>
<li>Write a List</li>
<li>Answer Question</li>
<li>Write A Map</li>
<li>Write a Letter</li>
<li>Investigate Sources</li>
<li>Keep a Journal
<img src="media/14607996200348/ideas.jpg" alt="ideas"/><img src="media/14607996200348/writePattern.jpg" alt="writePattern"/>
<img src="media/14607996200348/topic.jpg" alt="topi"/></li>
</ul>

<h2 id="toc_21">Developing A Preliminary Thesis</h2>

<p>A thesis is a statement of what an essay is about. Everything you write must relate to the thesis and help prove or explain it.</p>

<h3 id="toc_22">The Qualities of an Effective Thesis</h3>

<ol>
<li>State your <code>topic</code> and your <code>opinion</code> on that topic.</li>
<li>Limit your thesis to one topic and one opinion.</li>
<li>Avoid broad statements.</li>
<li>Express your opinion in a specific words.</li>
<li>Avoid factual statements.</li>
<li>Write your thesis so it is not an statement.</li>
<li>Avoid expressings such as &ldquo;in my opinion&rdquo;, &ldquo;I believe&rdquo;, &ldquo;I think&rdquo; and &ldquo;it seems to me&rdquo;.
<img src="media/14607996200348/assignment.jpg" alt="assignment"/></li>
</ol>

<h1 id="toc_23">Organizing and Drafting</h1>

<p>Perwriting is a necessary process.</p>

<p>Evulating your idea. Choose those realated to your aduience, topic and opinion, thesis. </p>

<h2 id="toc_24">Ordering Ideas</h2>

<h3 id="toc_25">Chronological Order</h3>

<p>Time order. It&rsquo;s often used for narration or explain how to do something.</p>

<h3 id="toc_26">Spatial Order</h3>

<p>You use it when you want to describe something.</p>

<h3 id="toc_27">Progressive Order</h3>

<p>Order it according to how compelling it is.</p>

<h3 id="toc_28">Outlining</h3>

<ul>
<li>The formal outline</li>
<li>The outline Worksheet</li>
</ul>

<p><strong>Introduction</strong></p>

<ul>
<li>Details to generate reader interest___</li>
<li>Preliminary thesis</li>
</ul>

<p><strong>Parapraph</strong><br/>
- Main ideas<br/>
    <img src="media/14607996200348/outline.jpg" alt="outline"/></p>

<ul>
<li>Supporting detalis
**Conclusion **</li>
<li><p>Details to privde closure </p></li>
<li><p>The outline tree</p></li>
</ul>

<p><img src="media/14607996200348/outlineTree.jpg" alt="outlineTree"/></p>

<h2 id="toc_29">Writing Your First Draft</h2>

<h3 id="toc_30">Structuring your essay</h3>

<ul>
<li>The beginning</li>
<li>The middle</li>
<li>body paragraph(Topic sentence)</li>
<li>The end</li>
</ul>

<h3 id="toc_31">The introduction</h3>

<ul>
<li>Provide Background Information</li>
<li>Tell a Perinent Story</li>
<li>Explain Why Your Topic Is Important</li>
<li>Present Some Interesting Images or Use Description</li>
<li>Present an Intriguing Problem or Raise a Provocative Question</li>
<li>Present an Opposing ViewPoint</li>
<li>Establish Yourself As Someone Knowlegeable About the Topic</li>
<li>Open with an Attention-Grabbing Statemnet</li>
<li>Explain your purpose</li>
<li>Find Some Common Ground to Establish a Bond With Your Reader</li>
<li>Provide an interesting Question</li>
<li>Define Something</li>
<li>Give Relevant Example</li>
</ul>

<p>Avoid apologizing.</p>

<h3 id="toc_32">Body Paragraphs</h3>

<ul>
<li>Topic Sentence

<ul>
<li>Placement of the Topic Sentence(first,last) </li>
<li>Quantities of an Effective Sentence

<ul>
<li>Accurately state the main idea of the body paragraph.</li>
<li>State one main idea.</li>
<li>State a main related to the thesis. </li>
</ul></li>
</ul></li>
<li><p>Supporting details</p>

<ul>
<li><p>Effective Supporting details</p>

<ul>
<li><p>Provide adequate supporting deatils</p>

<blockquote>
<p>To provide adquate deatils, remember to <strong><em>show</em></strong> as well as <strong><em>tell</em></strong>.  </p>
</blockquote></li>
<li><p>Provide relevent supporting details.</p></li>
</ul></li>
</ul></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS Programming Reading Notes]]></title>
    <link href="azureyu.com/2016-04-15-iOSProgramming.html"/>
    <updated>2016-05-10T14:36:11+08:00</updated>
    <id>azureyu.com/2016-04-15-iOSProgramming.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<ul>
<li>
<a href="#toc_0">Chapter 6. Anatomy of an Xcode Project</a>
</li>
<li>
<a href="#toc_1">从项目到可运行的App</a>
</li>
<li>
<a href="#toc_2">Build Settings</a>
</li>
<li>
<a href="#toc_3">Nib Files</a>
</li>
<li>
<a href="#toc_4">Code File and App Launch Process</a>
<ul>
<li>
<a href="#toc_5">The entry point</a>
</li>
<li>
<a href="#toc_6">UIApplicationMain</a>
</li>
</ul>
</li>
<li>
<a href="#toc_7">Cocoa</a>
</li>
<li>
<a href="#toc_8">Subclassing</a>
</li>
<li>
<a href="#toc_9">Categories and Extensions</a>
<ul>
<li>
<a href="#toc_10">Swift中如何使用extension？</a>
</li>
<li>
<a href="#toc_11">你如何使用extension？</a>
</li>
</ul>
</li>
<li>
<a href="#toc_12">Document</a>
</li>
</ul>


<p>iOS 8 Programming Fundamental with Swift Part 2 IDE</p>

<h2 id="toc_0">Chapter 6. Anatomy of an Xcode Project</h2>

<h2 id="toc_1">从项目到可运行的App</h2>

<p>App文件其实就是一个特殊的叫作<em>package</em>的文件夹。<br/>
假设应用名为Empty Window</p>

<p><img src="media/14628621715331/package.png" alt="package"/></p>

<p>Empty window: 编译的文件。<br/>
Main.Storyboard:Storyboard 文件，a bundle of nibs files.按需加载。<br/>
Info.list : 配置文件。<br/>
Frameworks: 需添加的框架。<br/>
PkgInfo: 历史遗留物。</p>

<!-- more -->

<h2 id="toc_2">Build Settings</h2>

<p>属性列表文件就是一系列的键对值。</p>

<ul>
<li>修改Info.plist文件 Editor-&gt;Show raw values.</li>
</ul>

<h2 id="toc_3">Nib Files</h2>

<p>一个Nib文件是一部分用户界面描述，它以已编译的格式包含在一个以<em>.nib结尾</em>的文件里。</p>

<p>它是在编译过程中由<code>.xib</code>文件生成的,相应的，包含多个nib文件的<code>.storyboardc</code>由<br/>
<code>.storyboard</code>文件生成。</p>

<h2 id="toc_4">Code File and App Launch Process</h2>

<h3 id="toc_5">The entry point</h3>

<p>写过C语言的都知道，程序进入开始执行的地方是main函数。同样的在Objective-C中也是。</p>

<pre><code>int main(int argh, char *argv[]) {
        @autoreleasepool {
            return UIApplicationMain(argh, argue, nil,
                NSStringFromClass([AppDelegate class]));
} } 
</code></pre>

<p>做了两件事情:</p>

<ul>
<li>设置了内存管理环境</li>
<li>调用了UIApplicationMain函数</li>
</ul>

<p>但在swift中你找不到main函数：</p>

<pre><code>@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {...}
</code></pre>

<p>上面的@UIApplicationMain属性，就实现了main函数的功能。你也可以自定义，新建main.swift(必须以main命名)，在其中写：</p>

<pre><code>import UIKit
UIApplicationMain(
    Process.argc, Process.unsafeArgv, nil, NSStringFromClass(AppDelegate))
</code></pre>

<h3 id="toc_6">UIApplicationMain</h3>

<p>其实你的App不过就是对单个巨大的UIApplictionMain函数的调用。（想一想C语言中main函数的调用执行）</p>

<p>UIApplicationMain主要做的事：</p>

<ol>
<li>创建你app的第一个实例——共享应用实例(the shared application instance)。之后，你可以很容易的通过调用UIApplication.sharedApplication()得到该实例。UIApplicationMain调用的第三个参数，指定了应该实例化哪一个共享应用实例。默认是nil，如果你想使用一个自己写的子类，就可以改为NSStringFromClass(MyUIApplicationSubclass)（MyUIApplicationSubclass是你自己的子类名）。</li>
<li>创建你的第二个实例—— 应用实例的代理(delegate)。同理，它对应第四个参数。</li>
<li>如果Info.list指定了一个主故事板文件(main storyboard file)，UIApplicationMain就会加载并查找它的初始视图控制器(initial view controller)。UIApplicationMain会实例化该视图控制器。</li>
<li>如果有一个主故事板文件，UIApplicationMain就会开始创建窗口(<code>Window</code>)。它是你app的第四个实例，是UIWindows的实例。赋给应用代理的window属性，初始化视图控制器赋给窗口实例（window instance）的rootViewController属性。</li>
<li>UIApplicationMain转向app delegate instance并开始调用其中的代码。终于，你可以在其中写自己的代码了。但是，最好只做一些<strong>不费时</strong>的初始化工作，因为这个时候应用的界面还没有显示。</li>
<li>如果有一个主故事板，UIApplicationMain现在回让它显示出来了。它通过调用UIWindow实例中的<code>makeKeyandVisible</code>方法来实现。</li>
<li>现在窗口马上就会显示了。</li>
</ol>

<p>如果没有指定一个主故事板，你也可以自己写：</p>

<pre><code>    class AppDelegate: UIResponder, UIApplicationDelegate {
        var window: UIWindow?

        // look, ma, no storyboard!
        fun application(application: UIApplication, didFinishLaunchingWithOptions launchOptions: [NSObject: AnyObject]?) -&gt; Bool {
            self.window = UIWindow()
            self.window!.backgroundColor = UIColor.whiteColor()
            self.window!.rootViewController =
                MyViewController(nibName:&quot;MyViewController&quot;, bundle:nil)
            self.window!.makeKeyAndVisible()
            return true
        }
    }
</code></pre>

<p><code>framework</code>:已编译的代码库。<br/>
对设备系统framework子集的复制叫做<code>SDK</code>(software development kit)。</p>

<p>链接(<code>Linking</code>)是将你的已编译代码与所需框架挂钩的过程。</p>

<p>Swift使用Modules。Modules会自动编译。<br/>
Modules是缓存信息，存放在Library/Developer/Xcode/DrivedData/ModulesCache.它精巧而方便，但也有缺点，你无法确切的指定自己使用了哪些框架。响应的头文件也不会在导航中显示。</p>

<p>有些情况下你也需要手动添加框架：</p>

<hr/>

<h2 id="toc_7">Cocoa</h2>

<p>在进行iOS编程时，多数情况下是在与Cocoa进行交互。<br/>
Cocoa是一个很庞大的库，它分为了几个小库。</p>

<h2 id="toc_8">Subclassing</h2>

<p>Cocoa会提供给你一些可以直接使用的对象，比如UIButton。有时候，你会想要自定义这些对象。在对其继承之前，最好查一查，可不可以直接进行更改。比如UIButton就可以更改其标题，背景图片等。</p>

<p>但是，不管怎样，你都有更改属性和方法还是不能满足的时候。这种时候，Cocoa会提供给你一些方法可以进行子类化(subclassing)和重载。</p>

<p>比如UIView，你继承UIView之后，可以对drawRect进行重载，绘制自定义视图。</p>

<p>但是，继承是你在和cocoa交互时，极少会使用到的方式。知道什么时候使用继承是需要技巧的，但是更通用的规则是，如果不是确切的知道该继承，你最好不要使用它。</p>

<p>不使用继承的一个重要原因是，大多数自带的Cocoa类使用委托(delegation)来自定义行为(方法)。</p>

<p>(纯粹看理论会没有实际认知，需要编码去理解。<br/>
知识编码却会陷入似懂非懂的状态，需要整合理论去理解。)</p>

<h2 id="toc_9">Categories and Extensions</h2>

<p>OC中Categories指直接在已存在的类上添加方法，Swift中叫作Extensions。</p>

<h3 id="toc_10">Swift中如何使用extension？</h3>

<p>例子，Array<T>，多使用extension加少量的protocol。多个extension，把函数体分为多个部分不不是全部在一起，这样使得代码更容易被理解，同时相关联的函数也聚集在一起。<br/>
eg. Core Graphic</p>

<h3 id="toc_11">你如何使用extension？</h3>

<p>在已存在的对象类型中添加函数。<br/>
而且它使用于Swift三种类型对象，比如enum和struct不能继承却可以extension。<br/>
一次改变，处处改变。</p>

<p>会在不同的头文件中都有categories的声明，但文档之间没有链接，这也许是cocoa框架结构的问题之一吧。</p>

<h2 id="toc_12">Document</h2>

<ul>
<li>Inherits from 继承自何处，不断的向上查看父类，以寻找到你需要的信息。</li>
<li>Conforms to 这怎么翻译，不断的查看其实现的协议(Protocal),以寻找到你需要的信息。</li>
<li>Framework  看该类属于哪个框架，在使用时，需要将框架import你的代码中。</li>
<li>Availability   在什么版本开始可以使用。</li>
<li>Declared in  类被声明在哪一个头文件中。</li>
<li>Related document 相关文档，提高给你有用的信息，比如代码示例。orient your thinking and provide you optionals</li>
<li>Sample code 下一章具体介绍</li>
<li>Body</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的iOS开发入门自学路径]]></title>
    <link href="azureyu.com/2016-03-24-iOSLearning.html"/>
    <updated>2016-05-10T14:36:11+08:00</updated>
    <id>azureyu.com/2016-03-24-iOSLearning.html</id>
    <content type="html"><![CDATA[
<p>我有一个清单，列着希望在大学里完成的事。比如，学一门乐器，和朋友去旅游，搭建自己的博客，去滑翔，看各主题的书籍。其中一项是，写自己的App并且上架。去年开始，我准备完成这一项，所以踏上了iOS开发之旅。现在，投入了约200个小时，我上架了自己的第一个简单的App。</p>

<span id="more"></span><!-- more -->

<p><img src="media/14628621715071/iTunes.png" alt="iTunes"/></p>

<p><em>PS:欢迎大家捧场~<a href="https://Appsto.re/cn/jnCgbb.i">App地址</a></em>。<em>当然，这不是我写的第一个App，你可以在<a href="https://github.com/yogayu">我的github</a>上看更多的项目,比如开源的<a href="https://github.com/Yogayu/EmotionNote">EmotionNote</a>。</em></p>

<hr/>

<p>如果，有朋友说他的清单上，也有独立完成一个App这一项，这篇文章，就是我希望对他说的话了。</p>

<ul>
<li>
<a href="#toc_0">正文：</a>
<ul>
<li>
<a href="#toc_1">确认个人目标</a>
<ul>
<li>
<a href="#toc_2">分析个人情况</a>
</li>
<li>
<a href="#toc_3">设计自己的路线</a>
</li>
<li>
<a href="#toc_4">记录学习的过程</a>
</li>
</ul>
</li>
<li>
<a href="#toc_5">开始吧</a>
<ul>
<li>
<a href="#toc_6">语言</a>
</li>
<li>
<a href="#toc_7">了解你的工具——Xcode</a>
</li>
<li>
<a href="#toc_8">基于项目的学习</a>
<ul>
<li>
<a href="#toc_9">从简单App开始, 分析其生命周期</a>
</li>
<li>
<a href="#toc_10">学习框架</a>
</li>
<li>
<a href="#toc_11">理解概念</a>
</li>
</ul>
</li>
<li>
<a href="#toc_12">界面</a>
</li>
<li>
<a href="#toc_13">网络</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_14">资源：</a>
</li>
</ul>
</li>
</ul>


<hr/>

<h2 id="toc_0">正文：</h2>

<h3 id="toc_1">确认个人目标</h3>

<h4 id="toc_2">分析个人情况</h4>

<p>在听取建议之前，想一想自己的情况会更有效。比如，你有面向对象的编程经验吗？如果有，那么语言学习就不需花太多时间。英语如何？基本的英文文档能读懂吗？适合你自己的学习方式是什么？<br/>
对我而言，软件工程在读，基础课程都学过，入门较快。学校更多是在教理论，我更偏向在实践中学习(Learning by doing)。</p>

<h4 id="toc_3">设计自己的路线</h4>

<p>了解自己的基本情况之后，就可以设计自己的学习路线了。一开始不会有完整的路线，需要根据自己的情况不断的调整。不妨读一读其他人入门的文章，吸取经验。</p>

<h4 id="toc_4">记录学习的过程</h4>

<p><img src="/img/time.jpg" alt="time"/></p>

<p>你怎么知道自己学得如何？传统教育，会有传统考试作为检验。我的做法是，记录过程，设置检验点，寻找概念的共通性，举一反三，问问题以及写作总结。</p>

<h3 id="toc_5">开始吧</h3>

<p>一开始熟悉编程语言，然后了解开发工具Xcode，理解大概的项目框架，App生命周期，界面如何和代码交互。理解设计模式，例如MVC。之后，就可以开始与Cocoa框架交互。最后，根据你想要写的App类型，再针对性的学习。</p>

<p><img src="media/14628621715071/Swift_-_Overview_-_Apple_Developer.png" alt="Swift_-_Overview_-_Apple_Develope"/></p>

<h4 id="toc_6">语言</h4>

<p>如果把写App比作是建房子，那么语言就是基本的砖块。那么，应该学习swift还是Objective-C呢？我个人的建议是先Swift，之后再熟悉OC。相比较OC，Swift更易上手，社区也日渐活跃。如果你有编程经验，这一步应该不会花去太多的时间，get your hands dirty才是关键。</p>

<p><img src="media/14628621715071/Xcode.png" alt="Xcode"/></p>

<h4 id="toc_7">了解你的工具——Xcode</h4>

<p>工欲善其事必先利其器，快速的熟悉Xcode界面，各面板功能，常用的快捷键等等，会提高不少效率。</p>

<p><img src="media/14628621715071/Xcode_Keyboard_Shortcuts.png" alt="Xcode_Keyboard_Shortcuts"/></p>

<h4 id="toc_8">基于项目的学习</h4>

<p>除了斯坦福大学的iOS开发入门之外，我个人很喜欢的一套教程是<a href="http://swifteducation.github.io">Teaching App Development with Swift</a>。它主要的观念就是基于项目的学习，每课时都有不同的项目，一个项目多个课时，清晰的步骤一步步搭建起完整功能。由实践引出知识点，最后给出延生思考和资料。</p>

<h5 id="toc_9">从简单App开始, 分析其<a href="https://developer.Apple.com/library/ios/documentation/iPhone/Conceptual/iPhoneOSProgrammingGuide/TheAppLifeCycle/TheAppLifeCycle.html#//Apple_ref/doc/uid/TP40007072-CH2-SW1">生命周期</a></h5>

<h5 id="toc_10">学习框架</h5>

<p><img src="media/14628621715071/1T0195N7-5.jpg" alt="1T0195N7-5"/></p>

<p>框架是什么？<br/>
很多系统的功能，都是不需要你实现的。想象你自己在拼一辆四驱车，马达啊，轮子啊，车身啊，一开始，这些你都不需要自己造。你需要知道的只是，每一部分的功能是什么，怎么把他们拼装在一起，哪一部分拼在哪里。同样的，框架就像是各种各样的零件，比如UIKit，可以改造车身外观，多媒体需要用AV Foundation。</p>

<p>总之，要弄清两个问题:<br/>
1. 什么时候用什么？(When to use what?)<br/>
2. 怎么用？(How?)</p>

<h5 id="toc_11">理解概念</h5>

<p>一边练习一边思考思考，各概念之间的联系与区别，多问几个为什么。比如：delegate、protocol、tagart-action、closure 。</p>

<p>其中Protocol，我是读了<a href="http://shop.oreilly.com/product/0636920044345.do?sortby=publicationDate">iOS 8 Programming Fundation with Swift (Matt Neuburg)</a>中的介绍，才彻底理解。<br/>
- ##### 动手，不断犯错，不断改进<br/><br/>
做完整的项目，而不只是一个功能点的练习。完整的项目，需要综合的考虑。界面的设计，类的设计，对象之间的交互等等。 一开始不知道如何实现时，不妨先看看其他人的实现。你可以查找书籍，在Github上阅读相关功能的源码，上StackOverFlow提问等等。</p>

<h4 id="toc_12">界面</h4>

<p>Apple很重视用户体验，学习基本的界面设计也是很必要的。之前完整的看了<a href="https://designcode.io">DesignCode</a>的教程，了解了基本的设计以及Sketch的使用。iOS Human Interface Guide也是开发之前的必读书。<br/>
界面布局的时候，不得不提一句AutoLayout，一开始使用很可能会出现各种问题，不过领路要领之后，你会发现它的强大之处。</p>

<h4 id="toc_13">网络</h4>

<ul>
<li>JSON</li>
</ul>

<hr/>

<p><img src="media/14628621715071/iTunesEdu.png" alt="iTunesEdu"/></p>

<h2 id="toc_14">资源：</h2>

<blockquote>
<h3 id="toc_15">网站:</h3>
</blockquote>

<ul>
<li><a href="http://www.developer.Apple.com/">http://www.developer.Apple.com/</a>
官方资料。文档阅读，一开始可能不知道如何下手。有一篇<a href="http://ourcoders.com/thread/show/117/">博文</a>写得十分详细。当然，<a href="http://www.oreilly.com/pub/au/249">iOS 8 Programming Fundation with Swift</a>书中第八章也是有介绍的。</li>
<li><a href="http://github.com">http://github.com</a>
程序员界Facebook。

<ul>
<li><a href="https://github.com/ipader/SwiftGuide">https://github.com/ipader/SwiftGuide</a></li>
<li><a href="https://github.com/matteocrippa/awesome-swift">https://github.com/matteocrippa/awesome-swift</a> </li>
</ul></li>
<li><a href="http://www.stackoverflow.com/">http://www.stackoverflow.com/</a>
技术问题版知乎。</li>
<li><a href="http://www.raywenderlich.com/">http://www.raywenderlich.com/</a>
声名在外的系列教程。</li>
<li><a href="http://nshipster.com/">http://nshipster.com/</a>
你不知道Mattt Thompson？快去看看吧。</li>
<li><a href="https://www.objc.io/">https://www.objc.io/</a>
基础到进阶推荐。</li>
<li><a href="https://designcode.io/">https://designcode.io/</a>
了解设计流程，基本界面交互、动画等。当时完整的跟着做了一遍，收获良多。</li>
</ul>

<blockquote>
<p>书:</p>
</blockquote>

<ul>
<li>The swift programming language</li>
<li><a href="http://shop.oreilly.com/product/0636920044345.do?sortby=publicationDate">iOS 8 Programming Fundation with Swift (Matt Neuburg)</a></li>
<li><a href="http://shop.oreilly.com/product/0636920044352.do?sortby=publicationDate">Programming iOS 9 (Matt Neuburg)</a>
个人强烈推荐的两本书，一直不断的在看，讲解细致，覆盖全面。</li>
<li>Learning iOS UI Development (Yari D&#39;areglia)
Yair D&#39;areglia的博客也值得一读：<a href="http://www.thinkandbuild.it">http://www.thinkandbuild.it</a></li>
</ul>

<blockquote>
<p>Post：</p>
</blockquote>

<ul>
<li><a href="https://medium.com/ios-os-x-development/things-i-wish-i-had-known-before-starting-ios-development-part-1-421a05e8447e#.91ras6ora">Things I wish I had known before starting iOS development</a></li>
<li><a href="https://www.zhihu.com/question/20264108/answer/30263999">iOS开发如何入门？——知乎</a></li>
<li><a href="http://limboy.me/ios/2014/12/31/learning-ios.html">自学iOS开发的经验</a></li>
</ul>

<hr/>

<p>我只列出了常用的资源，资料不在于多，而在于合理的利用。一个想法的开始很简单，按下收藏也很简单。不简单的是，开始去做，开始去实现。相信，如果你也愿意付出200小时，你也能完整的将自己的想法实现为应用。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning iOS UI Development Reading Notes]]></title>
    <link href="azureyu.com/2016-03-15-iOSUI.html"/>
    <updated>2016-05-10T14:36:11+08:00</updated>
    <id>azureyu.com/2016-03-15-iOSUI.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<h2 id="toc_0">Chapter 1. UI Fundamentals</h2>

<h2 id="toc_1">Windows</h2>

<p>window is an instance of UIWindow. It&rsquo;s the root class of UI&rsquo;s hierarchy. One of the function of the  window is to deliver touches to the underling views.</p>

<p>window好比是画板，view好比是画纸。</p>

<pre><code> -- widow
 --- rootViewController(view controller)
</code></pre>

<h3 id="toc_2">The content of the window</h3>

<p>@UIApplication从info.plist中找到信息，初始化view controller；App delegate中有window属性，设置之前初始化的view controller为其rootViewController。最后，执行完applicationDidFinishLaunching:withOption之后，会调用makeKeyAndVisible将界面从rootViewController中展示出来。（中文混杂英文描述好生涩）</p>

<ol>
<li>将某个view controller设置为rootViewController，window就会显示该view controller的view。</li>
<li><p>@UIApplicationMain</p>

<blockquote>
<p>The @UIApplicationMain attribute in the AppDelegate.swift file is responsible for the launch of the entire application process. It marks an entry point for the application launch, reading the Storyboard&rsquo;s information from the info.plist file and instantiating the initial view controller</p>
</blockquote></li>
<li><p>window property in the AppDelegate. </p>

<blockquote>
<p>This property will be a handy reference to the main window for the entire life cycle of the application.</p>
</blockquote></li>
<li><p>代码实现：</p></li>
</ol>

<!-- more -->

<pre><code>    fun application(application: UIApplication,
    didFinishLaunchingWithOptions
    launchOptions: [NSObject: AnyObject]?) -&gt; Bool {
    // Instantiate a window with the same size of the screen    
    window = UIWindow(frame: UIScreen.mainScreen().bounds)
    // Instantiate a view controller with the Main storyboard
    let storyboard = UIStoryboard(name: &quot;Main&quot;, bundle: nil)
    let viewController = storyboard.instantiateViewControllerWithIdentifier(&quot;viewController2&quot;) as! ViewController
    // Setup and present the window
    window?.rootViewController = viewController
    window?.makeKeyAndVisible()
    return true
    }
</code></pre>

<h2 id="toc_3">Working with views</h2>

<p>UIView is the basic class for other UI element.</p>

<blockquote>
<p>UIWindow is also the subclass of the UIVIew.</p>
</blockquote>

<h3 id="toc_4">define the view&rsquo;s geometry</h3>

<p>(0,0)<br/>
&mdash;&mdash;&mdash;&mdash;&gt;x<br/>
|<br/>
|<br/>
|<br/>
y</p>

<pre><code>// define a point
let point = CGPoint(x:20, y:10)
// define a size 
let size = CGSize(width: 20, height: 10)
// define a rect using size and point
let rect_A = CGRect(origin: point, size: size)
// define a text using x, y, width and height data
let rect_B = CGRect(x: 15, y: 10. width: 100, height: 30)
</code></pre>

<h4 id="toc_5">1. bounds</h4>

<p>the view&rsquo;s self information.自身坐标系下。</p>

<h4 id="toc_6">2. frame</h4>

<p>the place in the hierarchy.父级坐标系下。</p>

<h4 id="toc_7">3. center</h4>

<p>同frame。</p>

<h2 id="toc_8">UI hierarchy and views inheritance</h2>

<p>let parentVIew = view.parentview<br/>
let children = view.subview</p>

<ul>
<li>add</li>
<li>move</li>
<li><p>delete</p>

<pre><code>containerView.addSubView(childView)
containerView.insertSubview(childView, at index: 2)
containerView.insertSubview(childView, aboveSubview: anotherView)
containerView.insetSubview(childView,belowSubview : anotherView)

remove all the subview of the view:

for subview in container.subview{
    subview.removeFromSuperview()
}

viewWithTag
</code></pre></li>
</ul>

<h3 id="toc_9">View and subview visibility</h3>

<p>clipToBuounds, the parent view define the subviews&#39; visibility outside its boundaries.</p>

<h3 id="toc_10">Hierarchy events</h3>

<pre><code>override fun didMoveToSuperview(){
    // to do something
}

override fun didAddSubview(){
    // to do something
}

override fun didMoveToWindow(){
    println(&quot;I&#39;ve been attached to this window hierarchy: \(window)&quot;)
}
</code></pre>

<h2 id="toc_11">View drawing and life cycle</h2>

<ul>
<li>draw a view and creat snapshots for each displayed element.</li>
</ul>

<p>setNeedsDisplay pr setNeedsDisplayInRect can make the UIView invalidated. They will redraw during the next run loop. The latter one is better(the latter performs an optimization using only a portion of the new view content).</p>

<h2 id="toc_12">Chapter 2. UI Components overview - UIKit</h2>

<p>This chapter covers many different but related topics. Here is an overview of what you will read about in the next pages:</p>

<ul>
<li>Text elements and the keyboard</li>
<li>Buttons, selectors, and user interaction</li>
<li>View-based components</li>
<li>A UI for structured data</li>
<li>Custom components with the UIAppearance protocol</li>
</ul>

<h2 id="toc_13">Text element: UILabel,UItextfield,UItextview</h2>

<pre><code>var image = UIImageView(image:      UIImage(named:&quot;Image&quot;))
       self.textView.addSubview(image)
        let exclusionPath = UIBezierPath(rect: image.frame)
    self.textView.textContainer.exclusionPaths = [exclusionPath]
</code></pre>

<p>keyboard event and appearance</p>

<h2 id="toc_14">Button and selectors</h2>

<p>subclass of  UIControl class</p>

<p>Most of the UI elements&#39; role is to interact with the users. They convert touch event into actions or choices.</p>

<h3 id="toc_15">The Target-Action patten</h3>

<blockquote>
<p>This pattern defines how a control can request the execution of an function(action) to another object(target) in response to an event.</p>
</blockquote>

<h2 id="toc_16">View-based components</h2>

<p>subclass of UIView</p>

<ul>
<li>UIProgressView</li>
<li>UIActivityIndicatorView</li>
<li>UIImageView ,UIImage</li>
<li>UIScrollView</li>
</ul>

<h2 id="toc_17">Managing and presenting strutted data</h2>

<p>table and collection views</p>

<ul>
<li>UITableView(UIScrollView)</li>
<li>UICollectionView</li>
</ul>

<h2 id="toc_18">The UIApperance protocol</h2>

<p>Example:</p>

<pre><code>let minTrack = UIImage(named: &quot;minTrack&quot;)
let maxTrack = UIImage(named: &quot;maxTrack&quot;)
let thumb = UIImage(named: &quot;thumb&quot;)

// Create resizable images
let resizableMinTrack = 
minTrack?.resizableImageWithCapInsets(
UIEdgeInsets(top: 0, left: 5, bottom: 0, right: 5))

let resizableMaxTrack = 
maxTrack?.resizableImageWithCapInsets(
UIEdgeInsets(top: 0, left: 5, bottom: 0, right: 5))

// Configure the styles!
UISlider.appearance().setMaximumTrackImage(
resizableMaxTrack, forState: UIControlState.Normal)

UISlider.appearance().setMinimumTrackImage(
resizableMinTrack, forState: UIControlState.Normal)

UISlider.appearance().setThumbImage(
thumb, forState: UIControlState.Normal)
</code></pre>

<h1 id="toc_19">Chapter 3. Interface Builder, XIB, and storyboard</h1>

<h2 id="toc_20">working with the XIB files</h2>

<h2 id="toc_21">Managing user interface with storyboard</h2>

<h2 id="toc_22">connecting user interface with your code</h2>

<p>可以先写代码再拖动选择。</p>

<pre><code> @IBAction fund signIn(sender:UIButton){
 }

 var storyboard = UIStoryboard(name: &quot;Main&quot;, bundle: nil)

var storyboard = UIStoryboard(name: &quot;Main&quot;, bundle: nil)
</code></pre>

<h2 id="toc_23">implementing navigation with storyboard and segues</h2>

<pre><code>override fun prepareForSegue(segue: UIStoryboardSegue, 
                         sender: AnyObject?) {
        if segue.identifier == &quot;userDetails&quot;{
        let detailsVC = segue.destinationViewController as! 
                      detailsViewController
            detailsVC.firstname = user.firstname
            detailsVC.lastname = user.lastname
        }
}

@IBAction fund &lt;function name&gt;(segue:UIStoryboardSegue){}
</code></pre>

<h1 id="toc_24">Auto Layout</h1>

<blockquote>
<p>The main rule we should keep in mind is that if you want to specify the frame of a view with Auto Layout, you need to give it enough information for both the X/Y position and width/height size.</p>
</blockquote>

<hr/>

<p>WWDC</p>

<h1 id="toc_25">UI Level</h1>

<ol>
<li>Layout

<ul>
<li>stack view-&gt;behaviors </li>
<li>layout margins</li>
</ul></li>
<li>Appearance
basicline</li>
</ol>

<h2 id="toc_26">Xcode tips:</h2>

<ol>
<li>Shift + right click / control + left click</li>
<li>file:option+shift</li>
</ol>

<h2 id="toc_27">Build time</h2>

<p>design time-&gt;xml<br/>
build time-&gt;nib</p>

<h2 id="toc_28">Compiling storyboard</h2>

<h2 id="toc_29">losing storyboard at run time</h2>

<ol>
<li>Performance: Nib file loaded on demand.</li>
<li>Reuse: Nib files enable reuse.</li>
<li>Life cycle.</li>
</ol>

<h2 id="toc_30">Run time</h2>

<p>Connection, API, </p>

<h2 id="toc_31">Design</h2>

<ol>
<li>Bad App Icons
Beautiful+Instandly Recognizable</li>
<li>Focus on a unique shape<br/></li>
<li>Carefully select colors</li>
<li>Avoid using a photo</li>
<li>Avoid a lot of text</li>
<li>Be creative</li>
<li>Case study</li>
</ol>

<h1 id="toc_32">Cocoa Touch best practice</h1>

<h2 id="toc_33">put on the background.</h2>

<hr/>

<h2 id="toc_34">问题：如何自定义控件？</h2>

<p>-Object<br/>
&ndash;UIResponder<br/>
&mdash;UIView<br/>
&mdash;-UIControl</p>

<ul>
<li>控件的机制是什么？</li>
<li>如何获取用户的操作？</li>
<li>如何判断操作的度量？</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我]]></title>
    <link href="azureyu.com/14628621714939.html"/>
    <updated>2016-05-10T14:36:11+08:00</updated>
    <id>azureyu.com/14628621714939.html</id>
    <content type="html"><![CDATA[
<p>我不是太阳，不用负责永远灿烂</p>

<p>我只是地球，一半光明，一半黑暗</p>

<p>若活出自己，总要赤裸一番</p>

<p>就携几分颤抖，走走看看</p>

<p>谁知道尽头，是怎样</p>

<p>就像这世界本没有</p>

<p>标准答案</p>

<p>——2014.4.21 于重庆</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[黑客马拉松——Emotion Note开发小记]]></title>
    <link href="azureyu.com/2015-12-09-EmotionNote.html"/>
    <updated>2016-05-10T14:36:11+08:00</updated>
    <id>azureyu.com/2015-12-09-EmotionNote.html</id>
    <content type="html"><![CDATA[
<span id="more"></span><!-- more -->

<ul class="clearing-thumbs small-block-grid-2" data-clearing>

<li><a href="http://7xle3b.com1.z0.glb.clouddn.com/Simulator%20Screen%20Shot%202015年12月6日%20下午8.10.08.png
"><img data-caption="img" src="media/14418505549476/tt4-s.jpg"></a></li>

</ul>

<p>11月下旬，偶然看见有人在年级群中发，黑客马拉松的消息。点开看之后，发现是微软、灵雀云和开源社举办的。其中一个要求是使用微软牛津计划API，之前就对其中的情绪API感兴趣，正好这一次可以试着应用应用。</p>

<h2 id="toc_0">选题- What &amp; Why?</h2>

<p>选题的思路，有两条。一条是，分析生活中有什么需要解决的问题，可不可以应用牛津计划API进行解决；另外一条是，分析牛津计划API的特征属性，再进行联想，寻找其应用范围。此外，还对现在已经有的应用进行了调查和分析。</p>

<p>初步确定是在选发型和情绪笔记中选择。</p>

<!-- more -->

<p>制作选发型，需要用到图片的处理，也就是对位图的处理。另外还有有发型设计相关知识，比如：如何通过面部信息判断脸型？如何根据脸型推荐适合的发型？</p>

<p>情绪笔记，需要考虑，情绪的记录方式，展示方式。UI\UX的设计是关键点。多考虑细节，让用户愿意用。</p>

<p>我想，从用户的角度看，一般工具可以分为两类，一类是输入，一类是输出。比如，而换发型就是输入，用户是在通过应用获取信息，作出自己的判断和决策。笔记类是用户在表达自己，也就是用户自己在输出信息。</p>

<p>平时课业也多，最近一边上下半学期的课，一边还要准备上半学期课的期末考。另外自己平时的兴趣也会花去不少时间，练练吉他，跑跑步，看看电视剧。只有在仅剩的不多时间里，进行开发。</p>

<h2 id="toc_1">实现- How?</h2>

<p><img src = "http://7xle3b.com1.z0.glb.clouddn.com/emotionNoteFaceEmotion3.jpg"><br/>
12月初开始着手开发情绪笔记。每天大概花去两个小时，周末两天就全天在开发。</p>

<p>技术学习，官网文档是必读的，我也结合这一些书在看，比如iOS Programming cook book。人人称赞的Raywenderlich也是寻找解决方案的好地方。对于自己以前没有接触过的技术，Raywenderlich有一步一步详尽的介绍，是很好的初学实例。Cook book 适合进一步的了解，而StarkOverFlow，适合寻找你无法调试成功的原因。</p>

<h3 id="toc_2">基本技术:</h3>

<ol>
<li>UITablView,UIAlertController的使用</li>
<li>手势的使用</li>
<li>导航颜色修改</li>
<li>相机调用，相册获取</li>
<li>如何将图片转换为二进制，进行上传？</li>
<li>如何存储笔记内容?</li>
<li>如何通过Animolfire进行网络通信，调用API?</li>
<li>如何将获取的JSON数据用SwiftJSON进行转换?</li>
</ol>

<p>最后，用Sketch进行APP启动页和Icon的设计。</p>

<p>赶在6号完成了介绍视频的制作，使用QuickTimePlayer进行录制，iMovie进行剪辑制作。</p>

<p>7号用Keyonte完成了演示制作，并对之前的代码进行了优化。</p>

<p><img src="http://7xle3b.com1.z0.glb.clouddn.com/emotionNoteFaceEmotion4.jpg"></p>

<h2 id="toc_3">感受</h2>

<p>第一次黑客马拉松，感觉就是在冲刺跑。</p>

<p>继续复习密码学。</p>

<blockquote>
<p>后记:<br/>
因为没有用到Docker，不太对符合要求，就当是一次快速练习了。</p>

<p><a href="https://github.com/Yogayu/EmotionNote">源码地址</a></p>
</blockquote>

]]></content>
  </entry>
  
</feed>
